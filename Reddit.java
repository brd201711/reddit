// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Reddit.proto

package redditanalysis;

public final class Reddit {
  private Reddit() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface KeywordOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string keyword = 1;
    /**
     * <code>required string keyword = 1;</code>
     */
    boolean hasKeyword();
    /**
     * <code>required string keyword = 1;</code>
     */
    java.lang.String getKeyword();
    /**
     * <code>required string keyword = 1;</code>
     */
    com.google.protobuf.ByteString
        getKeywordBytes();

    // required float score = 2;
    /**
     * <code>required float score = 2;</code>
     */
    boolean hasScore();
    /**
     * <code>required float score = 2;</code>
     */
    float getScore();
  }
  /**
   * Protobuf type {@code Keyword}
   */
  public static final class Keyword extends
      com.google.protobuf.GeneratedMessage
      implements KeywordOrBuilder {
    // Use Keyword.newBuilder() to construct.
    private Keyword(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Keyword(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Keyword defaultInstance;
    public static Keyword getDefaultInstance() {
      return defaultInstance;
    }

    public Keyword getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Keyword(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              keyword_ = input.readBytes();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              score_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return redditanalysis.Reddit.internal_static_Keyword_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return redditanalysis.Reddit.internal_static_Keyword_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              redditanalysis.Reddit.Keyword.class, redditanalysis.Reddit.Keyword.Builder.class);
    }

    public static com.google.protobuf.Parser<Keyword> PARSER =
        new com.google.protobuf.AbstractParser<Keyword>() {
      public Keyword parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Keyword(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Keyword> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string keyword = 1;
    public static final int KEYWORD_FIELD_NUMBER = 1;
    private java.lang.Object keyword_;
    /**
     * <code>required string keyword = 1;</code>
     */
    public boolean hasKeyword() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string keyword = 1;</code>
     */
    public java.lang.String getKeyword() {
      java.lang.Object ref = keyword_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          keyword_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string keyword = 1;</code>
     */
    public com.google.protobuf.ByteString
        getKeywordBytes() {
      java.lang.Object ref = keyword_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        keyword_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required float score = 2;
    public static final int SCORE_FIELD_NUMBER = 2;
    private float score_;
    /**
     * <code>required float score = 2;</code>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float score = 2;</code>
     */
    public float getScore() {
      return score_;
    }

    private void initFields() {
      keyword_ = "";
      score_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasKeyword()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasScore()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getKeywordBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, score_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getKeywordBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, score_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static redditanalysis.Reddit.Keyword parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static redditanalysis.Reddit.Keyword parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static redditanalysis.Reddit.Keyword parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static redditanalysis.Reddit.Keyword parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static redditanalysis.Reddit.Keyword parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static redditanalysis.Reddit.Keyword parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static redditanalysis.Reddit.Keyword parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static redditanalysis.Reddit.Keyword parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static redditanalysis.Reddit.Keyword parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static redditanalysis.Reddit.Keyword parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(redditanalysis.Reddit.Keyword prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Keyword}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements redditanalysis.Reddit.KeywordOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return redditanalysis.Reddit.internal_static_Keyword_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return redditanalysis.Reddit.internal_static_Keyword_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                redditanalysis.Reddit.Keyword.class, redditanalysis.Reddit.Keyword.Builder.class);
      }

      // Construct using redditanalysis.Reddit.Keyword.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        keyword_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        score_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return redditanalysis.Reddit.internal_static_Keyword_descriptor;
      }

      public redditanalysis.Reddit.Keyword getDefaultInstanceForType() {
        return redditanalysis.Reddit.Keyword.getDefaultInstance();
      }

      public redditanalysis.Reddit.Keyword build() {
        redditanalysis.Reddit.Keyword result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public redditanalysis.Reddit.Keyword buildPartial() {
        redditanalysis.Reddit.Keyword result = new redditanalysis.Reddit.Keyword(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.keyword_ = keyword_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.score_ = score_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof redditanalysis.Reddit.Keyword) {
          return mergeFrom((redditanalysis.Reddit.Keyword)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(redditanalysis.Reddit.Keyword other) {
        if (other == redditanalysis.Reddit.Keyword.getDefaultInstance()) return this;
        if (other.hasKeyword()) {
          bitField0_ |= 0x00000001;
          keyword_ = other.keyword_;
          onChanged();
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasKeyword()) {
          
          return false;
        }
        if (!hasScore()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        redditanalysis.Reddit.Keyword parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (redditanalysis.Reddit.Keyword) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string keyword = 1;
      private java.lang.Object keyword_ = "";
      /**
       * <code>required string keyword = 1;</code>
       */
      public boolean hasKeyword() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string keyword = 1;</code>
       */
      public java.lang.String getKeyword() {
        java.lang.Object ref = keyword_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          keyword_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string keyword = 1;</code>
       */
      public com.google.protobuf.ByteString
          getKeywordBytes() {
        java.lang.Object ref = keyword_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          keyword_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string keyword = 1;</code>
       */
      public Builder setKeyword(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        keyword_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string keyword = 1;</code>
       */
      public Builder clearKeyword() {
        bitField0_ = (bitField0_ & ~0x00000001);
        keyword_ = getDefaultInstance().getKeyword();
        onChanged();
        return this;
      }
      /**
       * <code>required string keyword = 1;</code>
       */
      public Builder setKeywordBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        keyword_ = value;
        onChanged();
        return this;
      }

      // required float score = 2;
      private float score_ ;
      /**
       * <code>required float score = 2;</code>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float score = 2;</code>
       */
      public float getScore() {
        return score_;
      }
      /**
       * <code>required float score = 2;</code>
       */
      public Builder setScore(float value) {
        bitField0_ |= 0x00000002;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float score = 2;</code>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000002);
        score_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Keyword)
    }

    static {
      defaultInstance = new Keyword(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Keyword)
  }

  public interface CommentOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string body = 1;
    /**
     * <code>required string body = 1;</code>
     */
    boolean hasBody();
    /**
     * <code>required string body = 1;</code>
     */
    java.lang.String getBody();
    /**
     * <code>required string body = 1;</code>
     */
    com.google.protobuf.ByteString
        getBodyBytes();

    // required string body_html = 2;
    /**
     * <code>required string body_html = 2;</code>
     */
    boolean hasBodyHtml();
    /**
     * <code>required string body_html = 2;</code>
     */
    java.lang.String getBodyHtml();
    /**
     * <code>required string body_html = 2;</code>
     */
    com.google.protobuf.ByteString
        getBodyHtmlBytes();

    // required string author = 3;
    /**
     * <code>required string author = 3;</code>
     */
    boolean hasAuthor();
    /**
     * <code>required string author = 3;</code>
     */
    java.lang.String getAuthor();
    /**
     * <code>required string author = 3;</code>
     */
    com.google.protobuf.ByteString
        getAuthorBytes();

    // required int32 ups = 4;
    /**
     * <code>required int32 ups = 4;</code>
     */
    boolean hasUps();
    /**
     * <code>required int32 ups = 4;</code>
     */
    int getUps();

    // required int32 score = 5;
    /**
     * <code>required int32 score = 5;</code>
     */
    boolean hasScore();
    /**
     * <code>required int32 score = 5;</code>
     */
    int getScore();

    // required int32 downs = 6;
    /**
     * <code>required int32 downs = 6;</code>
     *
     * <pre>
     * Add user? other data?
     * </pre>
     */
    boolean hasDowns();
    /**
     * <code>required int32 downs = 6;</code>
     *
     * <pre>
     * Add user? other data?
     * </pre>
     */
    int getDowns();
  }
  /**
   * Protobuf type {@code Comment}
   */
  public static final class Comment extends
      com.google.protobuf.GeneratedMessage
      implements CommentOrBuilder {
    // Use Comment.newBuilder() to construct.
    private Comment(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Comment(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Comment defaultInstance;
    public static Comment getDefaultInstance() {
      return defaultInstance;
    }

    public Comment getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Comment(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              body_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              bodyHtml_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              author_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              ups_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              score_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              downs_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return redditanalysis.Reddit.internal_static_Comment_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return redditanalysis.Reddit.internal_static_Comment_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              redditanalysis.Reddit.Comment.class, redditanalysis.Reddit.Comment.Builder.class);
    }

    public static com.google.protobuf.Parser<Comment> PARSER =
        new com.google.protobuf.AbstractParser<Comment>() {
      public Comment parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Comment(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Comment> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string body = 1;
    public static final int BODY_FIELD_NUMBER = 1;
    private java.lang.Object body_;
    /**
     * <code>required string body = 1;</code>
     */
    public boolean hasBody() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string body = 1;</code>
     */
    public java.lang.String getBody() {
      java.lang.Object ref = body_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          body_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string body = 1;</code>
     */
    public com.google.protobuf.ByteString
        getBodyBytes() {
      java.lang.Object ref = body_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        body_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string body_html = 2;
    public static final int BODY_HTML_FIELD_NUMBER = 2;
    private java.lang.Object bodyHtml_;
    /**
     * <code>required string body_html = 2;</code>
     */
    public boolean hasBodyHtml() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string body_html = 2;</code>
     */
    public java.lang.String getBodyHtml() {
      java.lang.Object ref = bodyHtml_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          bodyHtml_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string body_html = 2;</code>
     */
    public com.google.protobuf.ByteString
        getBodyHtmlBytes() {
      java.lang.Object ref = bodyHtml_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        bodyHtml_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string author = 3;
    public static final int AUTHOR_FIELD_NUMBER = 3;
    private java.lang.Object author_;
    /**
     * <code>required string author = 3;</code>
     */
    public boolean hasAuthor() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required string author = 3;</code>
     */
    public java.lang.String getAuthor() {
      java.lang.Object ref = author_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          author_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string author = 3;</code>
     */
    public com.google.protobuf.ByteString
        getAuthorBytes() {
      java.lang.Object ref = author_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        author_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required int32 ups = 4;
    public static final int UPS_FIELD_NUMBER = 4;
    private int ups_;
    /**
     * <code>required int32 ups = 4;</code>
     */
    public boolean hasUps() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 ups = 4;</code>
     */
    public int getUps() {
      return ups_;
    }

    // required int32 score = 5;
    public static final int SCORE_FIELD_NUMBER = 5;
    private int score_;
    /**
     * <code>required int32 score = 5;</code>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 score = 5;</code>
     */
    public int getScore() {
      return score_;
    }

    // required int32 downs = 6;
    public static final int DOWNS_FIELD_NUMBER = 6;
    private int downs_;
    /**
     * <code>required int32 downs = 6;</code>
     *
     * <pre>
     * Add user? other data?
     * </pre>
     */
    public boolean hasDowns() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 downs = 6;</code>
     *
     * <pre>
     * Add user? other data?
     * </pre>
     */
    public int getDowns() {
      return downs_;
    }

    private void initFields() {
      body_ = "";
      bodyHtml_ = "";
      author_ = "";
      ups_ = 0;
      score_ = 0;
      downs_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasBody()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBodyHtml()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAuthor()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUps()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasScore()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDowns()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getBodyBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getBodyHtmlBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getAuthorBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, ups_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, score_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, downs_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getBodyBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getBodyHtmlBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getAuthorBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, ups_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, score_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, downs_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static redditanalysis.Reddit.Comment parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static redditanalysis.Reddit.Comment parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static redditanalysis.Reddit.Comment parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static redditanalysis.Reddit.Comment parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static redditanalysis.Reddit.Comment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static redditanalysis.Reddit.Comment parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static redditanalysis.Reddit.Comment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static redditanalysis.Reddit.Comment parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static redditanalysis.Reddit.Comment parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static redditanalysis.Reddit.Comment parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(redditanalysis.Reddit.Comment prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Comment}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements redditanalysis.Reddit.CommentOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return redditanalysis.Reddit.internal_static_Comment_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return redditanalysis.Reddit.internal_static_Comment_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                redditanalysis.Reddit.Comment.class, redditanalysis.Reddit.Comment.Builder.class);
      }

      // Construct using redditanalysis.Reddit.Comment.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        body_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        bodyHtml_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        author_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        ups_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        score_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        downs_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return redditanalysis.Reddit.internal_static_Comment_descriptor;
      }

      public redditanalysis.Reddit.Comment getDefaultInstanceForType() {
        return redditanalysis.Reddit.Comment.getDefaultInstance();
      }

      public redditanalysis.Reddit.Comment build() {
        redditanalysis.Reddit.Comment result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public redditanalysis.Reddit.Comment buildPartial() {
        redditanalysis.Reddit.Comment result = new redditanalysis.Reddit.Comment(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.body_ = body_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bodyHtml_ = bodyHtml_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.author_ = author_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.ups_ = ups_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.downs_ = downs_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof redditanalysis.Reddit.Comment) {
          return mergeFrom((redditanalysis.Reddit.Comment)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(redditanalysis.Reddit.Comment other) {
        if (other == redditanalysis.Reddit.Comment.getDefaultInstance()) return this;
        if (other.hasBody()) {
          bitField0_ |= 0x00000001;
          body_ = other.body_;
          onChanged();
        }
        if (other.hasBodyHtml()) {
          bitField0_ |= 0x00000002;
          bodyHtml_ = other.bodyHtml_;
          onChanged();
        }
        if (other.hasAuthor()) {
          bitField0_ |= 0x00000004;
          author_ = other.author_;
          onChanged();
        }
        if (other.hasUps()) {
          setUps(other.getUps());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasDowns()) {
          setDowns(other.getDowns());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasBody()) {
          
          return false;
        }
        if (!hasBodyHtml()) {
          
          return false;
        }
        if (!hasAuthor()) {
          
          return false;
        }
        if (!hasUps()) {
          
          return false;
        }
        if (!hasScore()) {
          
          return false;
        }
        if (!hasDowns()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        redditanalysis.Reddit.Comment parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (redditanalysis.Reddit.Comment) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string body = 1;
      private java.lang.Object body_ = "";
      /**
       * <code>required string body = 1;</code>
       */
      public boolean hasBody() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string body = 1;</code>
       */
      public java.lang.String getBody() {
        java.lang.Object ref = body_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          body_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string body = 1;</code>
       */
      public com.google.protobuf.ByteString
          getBodyBytes() {
        java.lang.Object ref = body_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          body_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string body = 1;</code>
       */
      public Builder setBody(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        body_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string body = 1;</code>
       */
      public Builder clearBody() {
        bitField0_ = (bitField0_ & ~0x00000001);
        body_ = getDefaultInstance().getBody();
        onChanged();
        return this;
      }
      /**
       * <code>required string body = 1;</code>
       */
      public Builder setBodyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        body_ = value;
        onChanged();
        return this;
      }

      // required string body_html = 2;
      private java.lang.Object bodyHtml_ = "";
      /**
       * <code>required string body_html = 2;</code>
       */
      public boolean hasBodyHtml() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string body_html = 2;</code>
       */
      public java.lang.String getBodyHtml() {
        java.lang.Object ref = bodyHtml_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          bodyHtml_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string body_html = 2;</code>
       */
      public com.google.protobuf.ByteString
          getBodyHtmlBytes() {
        java.lang.Object ref = bodyHtml_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          bodyHtml_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string body_html = 2;</code>
       */
      public Builder setBodyHtml(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        bodyHtml_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string body_html = 2;</code>
       */
      public Builder clearBodyHtml() {
        bitField0_ = (bitField0_ & ~0x00000002);
        bodyHtml_ = getDefaultInstance().getBodyHtml();
        onChanged();
        return this;
      }
      /**
       * <code>required string body_html = 2;</code>
       */
      public Builder setBodyHtmlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        bodyHtml_ = value;
        onChanged();
        return this;
      }

      // required string author = 3;
      private java.lang.Object author_ = "";
      /**
       * <code>required string author = 3;</code>
       */
      public boolean hasAuthor() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string author = 3;</code>
       */
      public java.lang.String getAuthor() {
        java.lang.Object ref = author_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          author_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string author = 3;</code>
       */
      public com.google.protobuf.ByteString
          getAuthorBytes() {
        java.lang.Object ref = author_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          author_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string author = 3;</code>
       */
      public Builder setAuthor(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        author_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string author = 3;</code>
       */
      public Builder clearAuthor() {
        bitField0_ = (bitField0_ & ~0x00000004);
        author_ = getDefaultInstance().getAuthor();
        onChanged();
        return this;
      }
      /**
       * <code>required string author = 3;</code>
       */
      public Builder setAuthorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        author_ = value;
        onChanged();
        return this;
      }

      // required int32 ups = 4;
      private int ups_ ;
      /**
       * <code>required int32 ups = 4;</code>
       */
      public boolean hasUps() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 ups = 4;</code>
       */
      public int getUps() {
        return ups_;
      }
      /**
       * <code>required int32 ups = 4;</code>
       */
      public Builder setUps(int value) {
        bitField0_ |= 0x00000008;
        ups_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 ups = 4;</code>
       */
      public Builder clearUps() {
        bitField0_ = (bitField0_ & ~0x00000008);
        ups_ = 0;
        onChanged();
        return this;
      }

      // required int32 score = 5;
      private int score_ ;
      /**
       * <code>required int32 score = 5;</code>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 score = 5;</code>
       */
      public int getScore() {
        return score_;
      }
      /**
       * <code>required int32 score = 5;</code>
       */
      public Builder setScore(int value) {
        bitField0_ |= 0x00000010;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 score = 5;</code>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000010);
        score_ = 0;
        onChanged();
        return this;
      }

      // required int32 downs = 6;
      private int downs_ ;
      /**
       * <code>required int32 downs = 6;</code>
       *
       * <pre>
       * Add user? other data?
       * </pre>
       */
      public boolean hasDowns() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 downs = 6;</code>
       *
       * <pre>
       * Add user? other data?
       * </pre>
       */
      public int getDowns() {
        return downs_;
      }
      /**
       * <code>required int32 downs = 6;</code>
       *
       * <pre>
       * Add user? other data?
       * </pre>
       */
      public Builder setDowns(int value) {
        bitField0_ |= 0x00000020;
        downs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 downs = 6;</code>
       *
       * <pre>
       * Add user? other data?
       * </pre>
       */
      public Builder clearDowns() {
        bitField0_ = (bitField0_ & ~0x00000020);
        downs_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Comment)
    }

    static {
      defaultInstance = new Comment(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Comment)
  }

  public interface SubRedditDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string selftext = 1;
    /**
     * <code>required string selftext = 1;</code>
     */
    boolean hasSelftext();
    /**
     * <code>required string selftext = 1;</code>
     */
    java.lang.String getSelftext();
    /**
     * <code>required string selftext = 1;</code>
     */
    com.google.protobuf.ByteString
        getSelftextBytes();

    // required string selftext_html = 2;
    /**
     * <code>required string selftext_html = 2;</code>
     */
    boolean hasSelftextHtml();
    /**
     * <code>required string selftext_html = 2;</code>
     */
    java.lang.String getSelftextHtml();
    /**
     * <code>required string selftext_html = 2;</code>
     */
    com.google.protobuf.ByteString
        getSelftextHtmlBytes();

    // required int32 num_comments = 3;
    /**
     * <code>required int32 num_comments = 3;</code>
     */
    boolean hasNumComments();
    /**
     * <code>required int32 num_comments = 3;</code>
     */
    int getNumComments();

    // required int32 score = 4;
    /**
     * <code>required int32 score = 4;</code>
     */
    boolean hasScore();
    /**
     * <code>required int32 score = 4;</code>
     */
    int getScore();

    // repeated .Comment comments = 5;
    /**
     * <code>repeated .Comment comments = 5;</code>
     */
    java.util.List<redditanalysis.Reddit.Comment> 
        getCommentsList();
    /**
     * <code>repeated .Comment comments = 5;</code>
     */
    redditanalysis.Reddit.Comment getComments(int index);
    /**
     * <code>repeated .Comment comments = 5;</code>
     */
    int getCommentsCount();
    /**
     * <code>repeated .Comment comments = 5;</code>
     */
    java.util.List<? extends redditanalysis.Reddit.CommentOrBuilder> 
        getCommentsOrBuilderList();
    /**
     * <code>repeated .Comment comments = 5;</code>
     */
    redditanalysis.Reddit.CommentOrBuilder getCommentsOrBuilder(
        int index);

    // repeated .Keyword keywords = 6;
    /**
     * <code>repeated .Keyword keywords = 6;</code>
     */
    java.util.List<redditanalysis.Reddit.Keyword> 
        getKeywordsList();
    /**
     * <code>repeated .Keyword keywords = 6;</code>
     */
    redditanalysis.Reddit.Keyword getKeywords(int index);
    /**
     * <code>repeated .Keyword keywords = 6;</code>
     */
    int getKeywordsCount();
    /**
     * <code>repeated .Keyword keywords = 6;</code>
     */
    java.util.List<? extends redditanalysis.Reddit.KeywordOrBuilder> 
        getKeywordsOrBuilderList();
    /**
     * <code>repeated .Keyword keywords = 6;</code>
     */
    redditanalysis.Reddit.KeywordOrBuilder getKeywordsOrBuilder(
        int index);

    // required int32 ups = 7;
    /**
     * <code>required int32 ups = 7;</code>
     */
    boolean hasUps();
    /**
     * <code>required int32 ups = 7;</code>
     */
    int getUps();

    // required string url = 8;
    /**
     * <code>required string url = 8;</code>
     */
    boolean hasUrl();
    /**
     * <code>required string url = 8;</code>
     */
    java.lang.String getUrl();
    /**
     * <code>required string url = 8;</code>
     */
    com.google.protobuf.ByteString
        getUrlBytes();

    // required string title = 9;
    /**
     * <code>required string title = 9;</code>
     */
    boolean hasTitle();
    /**
     * <code>required string title = 9;</code>
     */
    java.lang.String getTitle();
    /**
     * <code>required string title = 9;</code>
     */
    com.google.protobuf.ByteString
        getTitleBytes();

    // required int32 downs = 10;
    /**
     * <code>required int32 downs = 10;</code>
     */
    boolean hasDowns();
    /**
     * <code>required int32 downs = 10;</code>
     */
    int getDowns();
  }
  /**
   * Protobuf type {@code SubRedditData}
   */
  public static final class SubRedditData extends
      com.google.protobuf.GeneratedMessage
      implements SubRedditDataOrBuilder {
    // Use SubRedditData.newBuilder() to construct.
    private SubRedditData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SubRedditData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SubRedditData defaultInstance;
    public static SubRedditData getDefaultInstance() {
      return defaultInstance;
    }

    public SubRedditData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SubRedditData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              selftext_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              selftextHtml_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              numComments_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              score_ = input.readInt32();
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                comments_ = new java.util.ArrayList<redditanalysis.Reddit.Comment>();
                mutable_bitField0_ |= 0x00000010;
              }
              comments_.add(input.readMessage(redditanalysis.Reddit.Comment.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                keywords_ = new java.util.ArrayList<redditanalysis.Reddit.Keyword>();
                mutable_bitField0_ |= 0x00000020;
              }
              keywords_.add(input.readMessage(redditanalysis.Reddit.Keyword.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              ups_ = input.readInt32();
              break;
            }
            case 66: {
              bitField0_ |= 0x00000020;
              url_ = input.readBytes();
              break;
            }
            case 74: {
              bitField0_ |= 0x00000040;
              title_ = input.readBytes();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000080;
              downs_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          comments_ = java.util.Collections.unmodifiableList(comments_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          keywords_ = java.util.Collections.unmodifiableList(keywords_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return redditanalysis.Reddit.internal_static_SubRedditData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return redditanalysis.Reddit.internal_static_SubRedditData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              redditanalysis.Reddit.SubRedditData.class, redditanalysis.Reddit.SubRedditData.Builder.class);
    }

    public static com.google.protobuf.Parser<SubRedditData> PARSER =
        new com.google.protobuf.AbstractParser<SubRedditData>() {
      public SubRedditData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SubRedditData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SubRedditData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string selftext = 1;
    public static final int SELFTEXT_FIELD_NUMBER = 1;
    private java.lang.Object selftext_;
    /**
     * <code>required string selftext = 1;</code>
     */
    public boolean hasSelftext() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string selftext = 1;</code>
     */
    public java.lang.String getSelftext() {
      java.lang.Object ref = selftext_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          selftext_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string selftext = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSelftextBytes() {
      java.lang.Object ref = selftext_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        selftext_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string selftext_html = 2;
    public static final int SELFTEXT_HTML_FIELD_NUMBER = 2;
    private java.lang.Object selftextHtml_;
    /**
     * <code>required string selftext_html = 2;</code>
     */
    public boolean hasSelftextHtml() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string selftext_html = 2;</code>
     */
    public java.lang.String getSelftextHtml() {
      java.lang.Object ref = selftextHtml_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          selftextHtml_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string selftext_html = 2;</code>
     */
    public com.google.protobuf.ByteString
        getSelftextHtmlBytes() {
      java.lang.Object ref = selftextHtml_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        selftextHtml_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required int32 num_comments = 3;
    public static final int NUM_COMMENTS_FIELD_NUMBER = 3;
    private int numComments_;
    /**
     * <code>required int32 num_comments = 3;</code>
     */
    public boolean hasNumComments() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 num_comments = 3;</code>
     */
    public int getNumComments() {
      return numComments_;
    }

    // required int32 score = 4;
    public static final int SCORE_FIELD_NUMBER = 4;
    private int score_;
    /**
     * <code>required int32 score = 4;</code>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 score = 4;</code>
     */
    public int getScore() {
      return score_;
    }

    // repeated .Comment comments = 5;
    public static final int COMMENTS_FIELD_NUMBER = 5;
    private java.util.List<redditanalysis.Reddit.Comment> comments_;
    /**
     * <code>repeated .Comment comments = 5;</code>
     */
    public java.util.List<redditanalysis.Reddit.Comment> getCommentsList() {
      return comments_;
    }
    /**
     * <code>repeated .Comment comments = 5;</code>
     */
    public java.util.List<? extends redditanalysis.Reddit.CommentOrBuilder> 
        getCommentsOrBuilderList() {
      return comments_;
    }
    /**
     * <code>repeated .Comment comments = 5;</code>
     */
    public int getCommentsCount() {
      return comments_.size();
    }
    /**
     * <code>repeated .Comment comments = 5;</code>
     */
    public redditanalysis.Reddit.Comment getComments(int index) {
      return comments_.get(index);
    }
    /**
     * <code>repeated .Comment comments = 5;</code>
     */
    public redditanalysis.Reddit.CommentOrBuilder getCommentsOrBuilder(
        int index) {
      return comments_.get(index);
    }

    // repeated .Keyword keywords = 6;
    public static final int KEYWORDS_FIELD_NUMBER = 6;
    private java.util.List<redditanalysis.Reddit.Keyword> keywords_;
    /**
     * <code>repeated .Keyword keywords = 6;</code>
     */
    public java.util.List<redditanalysis.Reddit.Keyword> getKeywordsList() {
      return keywords_;
    }
    /**
     * <code>repeated .Keyword keywords = 6;</code>
     */
    public java.util.List<? extends redditanalysis.Reddit.KeywordOrBuilder> 
        getKeywordsOrBuilderList() {
      return keywords_;
    }
    /**
     * <code>repeated .Keyword keywords = 6;</code>
     */
    public int getKeywordsCount() {
      return keywords_.size();
    }
    /**
     * <code>repeated .Keyword keywords = 6;</code>
     */
    public redditanalysis.Reddit.Keyword getKeywords(int index) {
      return keywords_.get(index);
    }
    /**
     * <code>repeated .Keyword keywords = 6;</code>
     */
    public redditanalysis.Reddit.KeywordOrBuilder getKeywordsOrBuilder(
        int index) {
      return keywords_.get(index);
    }

    // required int32 ups = 7;
    public static final int UPS_FIELD_NUMBER = 7;
    private int ups_;
    /**
     * <code>required int32 ups = 7;</code>
     */
    public boolean hasUps() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 ups = 7;</code>
     */
    public int getUps() {
      return ups_;
    }

    // required string url = 8;
    public static final int URL_FIELD_NUMBER = 8;
    private java.lang.Object url_;
    /**
     * <code>required string url = 8;</code>
     */
    public boolean hasUrl() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required string url = 8;</code>
     */
    public java.lang.String getUrl() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          url_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string url = 8;</code>
     */
    public com.google.protobuf.ByteString
        getUrlBytes() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        url_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string title = 9;
    public static final int TITLE_FIELD_NUMBER = 9;
    private java.lang.Object title_;
    /**
     * <code>required string title = 9;</code>
     */
    public boolean hasTitle() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required string title = 9;</code>
     */
    public java.lang.String getTitle() {
      java.lang.Object ref = title_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          title_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string title = 9;</code>
     */
    public com.google.protobuf.ByteString
        getTitleBytes() {
      java.lang.Object ref = title_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        title_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required int32 downs = 10;
    public static final int DOWNS_FIELD_NUMBER = 10;
    private int downs_;
    /**
     * <code>required int32 downs = 10;</code>
     */
    public boolean hasDowns() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required int32 downs = 10;</code>
     */
    public int getDowns() {
      return downs_;
    }

    private void initFields() {
      selftext_ = "";
      selftextHtml_ = "";
      numComments_ = 0;
      score_ = 0;
      comments_ = java.util.Collections.emptyList();
      keywords_ = java.util.Collections.emptyList();
      ups_ = 0;
      url_ = "";
      title_ = "";
      downs_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSelftext()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSelftextHtml()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNumComments()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasScore()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUps()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUrl()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTitle()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDowns()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getCommentsCount(); i++) {
        if (!getComments(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getKeywordsCount(); i++) {
        if (!getKeywords(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getSelftextBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getSelftextHtmlBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, numComments_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, score_);
      }
      for (int i = 0; i < comments_.size(); i++) {
        output.writeMessage(5, comments_.get(i));
      }
      for (int i = 0; i < keywords_.size(); i++) {
        output.writeMessage(6, keywords_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, ups_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(8, getUrlBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(9, getTitleBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(10, downs_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getSelftextBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getSelftextHtmlBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, numComments_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, score_);
      }
      for (int i = 0; i < comments_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, comments_.get(i));
      }
      for (int i = 0; i < keywords_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, keywords_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, ups_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getUrlBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(9, getTitleBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, downs_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static redditanalysis.Reddit.SubRedditData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static redditanalysis.Reddit.SubRedditData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static redditanalysis.Reddit.SubRedditData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static redditanalysis.Reddit.SubRedditData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static redditanalysis.Reddit.SubRedditData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static redditanalysis.Reddit.SubRedditData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static redditanalysis.Reddit.SubRedditData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static redditanalysis.Reddit.SubRedditData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static redditanalysis.Reddit.SubRedditData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static redditanalysis.Reddit.SubRedditData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(redditanalysis.Reddit.SubRedditData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SubRedditData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements redditanalysis.Reddit.SubRedditDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return redditanalysis.Reddit.internal_static_SubRedditData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return redditanalysis.Reddit.internal_static_SubRedditData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                redditanalysis.Reddit.SubRedditData.class, redditanalysis.Reddit.SubRedditData.Builder.class);
      }

      // Construct using redditanalysis.Reddit.SubRedditData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCommentsFieldBuilder();
          getKeywordsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        selftext_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        selftextHtml_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        numComments_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        score_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (commentsBuilder_ == null) {
          comments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          commentsBuilder_.clear();
        }
        if (keywordsBuilder_ == null) {
          keywords_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          keywordsBuilder_.clear();
        }
        ups_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        url_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        title_ = "";
        bitField0_ = (bitField0_ & ~0x00000100);
        downs_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return redditanalysis.Reddit.internal_static_SubRedditData_descriptor;
      }

      public redditanalysis.Reddit.SubRedditData getDefaultInstanceForType() {
        return redditanalysis.Reddit.SubRedditData.getDefaultInstance();
      }

      public redditanalysis.Reddit.SubRedditData build() {
        redditanalysis.Reddit.SubRedditData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public redditanalysis.Reddit.SubRedditData buildPartial() {
        redditanalysis.Reddit.SubRedditData result = new redditanalysis.Reddit.SubRedditData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.selftext_ = selftext_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.selftextHtml_ = selftextHtml_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.numComments_ = numComments_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.score_ = score_;
        if (commentsBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            comments_ = java.util.Collections.unmodifiableList(comments_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.comments_ = comments_;
        } else {
          result.comments_ = commentsBuilder_.build();
        }
        if (keywordsBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            keywords_ = java.util.Collections.unmodifiableList(keywords_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.keywords_ = keywords_;
        } else {
          result.keywords_ = keywordsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.ups_ = ups_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.url_ = url_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.title_ = title_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        result.downs_ = downs_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof redditanalysis.Reddit.SubRedditData) {
          return mergeFrom((redditanalysis.Reddit.SubRedditData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(redditanalysis.Reddit.SubRedditData other) {
        if (other == redditanalysis.Reddit.SubRedditData.getDefaultInstance()) return this;
        if (other.hasSelftext()) {
          bitField0_ |= 0x00000001;
          selftext_ = other.selftext_;
          onChanged();
        }
        if (other.hasSelftextHtml()) {
          bitField0_ |= 0x00000002;
          selftextHtml_ = other.selftextHtml_;
          onChanged();
        }
        if (other.hasNumComments()) {
          setNumComments(other.getNumComments());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (commentsBuilder_ == null) {
          if (!other.comments_.isEmpty()) {
            if (comments_.isEmpty()) {
              comments_ = other.comments_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCommentsIsMutable();
              comments_.addAll(other.comments_);
            }
            onChanged();
          }
        } else {
          if (!other.comments_.isEmpty()) {
            if (commentsBuilder_.isEmpty()) {
              commentsBuilder_.dispose();
              commentsBuilder_ = null;
              comments_ = other.comments_;
              bitField0_ = (bitField0_ & ~0x00000010);
              commentsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCommentsFieldBuilder() : null;
            } else {
              commentsBuilder_.addAllMessages(other.comments_);
            }
          }
        }
        if (keywordsBuilder_ == null) {
          if (!other.keywords_.isEmpty()) {
            if (keywords_.isEmpty()) {
              keywords_ = other.keywords_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureKeywordsIsMutable();
              keywords_.addAll(other.keywords_);
            }
            onChanged();
          }
        } else {
          if (!other.keywords_.isEmpty()) {
            if (keywordsBuilder_.isEmpty()) {
              keywordsBuilder_.dispose();
              keywordsBuilder_ = null;
              keywords_ = other.keywords_;
              bitField0_ = (bitField0_ & ~0x00000020);
              keywordsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getKeywordsFieldBuilder() : null;
            } else {
              keywordsBuilder_.addAllMessages(other.keywords_);
            }
          }
        }
        if (other.hasUps()) {
          setUps(other.getUps());
        }
        if (other.hasUrl()) {
          bitField0_ |= 0x00000080;
          url_ = other.url_;
          onChanged();
        }
        if (other.hasTitle()) {
          bitField0_ |= 0x00000100;
          title_ = other.title_;
          onChanged();
        }
        if (other.hasDowns()) {
          setDowns(other.getDowns());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSelftext()) {
          
          return false;
        }
        if (!hasSelftextHtml()) {
          
          return false;
        }
        if (!hasNumComments()) {
          
          return false;
        }
        if (!hasScore()) {
          
          return false;
        }
        if (!hasUps()) {
          
          return false;
        }
        if (!hasUrl()) {
          
          return false;
        }
        if (!hasTitle()) {
          
          return false;
        }
        if (!hasDowns()) {
          
          return false;
        }
        for (int i = 0; i < getCommentsCount(); i++) {
          if (!getComments(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getKeywordsCount(); i++) {
          if (!getKeywords(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        redditanalysis.Reddit.SubRedditData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (redditanalysis.Reddit.SubRedditData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string selftext = 1;
      private java.lang.Object selftext_ = "";
      /**
       * <code>required string selftext = 1;</code>
       */
      public boolean hasSelftext() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string selftext = 1;</code>
       */
      public java.lang.String getSelftext() {
        java.lang.Object ref = selftext_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          selftext_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string selftext = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSelftextBytes() {
        java.lang.Object ref = selftext_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          selftext_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string selftext = 1;</code>
       */
      public Builder setSelftext(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        selftext_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string selftext = 1;</code>
       */
      public Builder clearSelftext() {
        bitField0_ = (bitField0_ & ~0x00000001);
        selftext_ = getDefaultInstance().getSelftext();
        onChanged();
        return this;
      }
      /**
       * <code>required string selftext = 1;</code>
       */
      public Builder setSelftextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        selftext_ = value;
        onChanged();
        return this;
      }

      // required string selftext_html = 2;
      private java.lang.Object selftextHtml_ = "";
      /**
       * <code>required string selftext_html = 2;</code>
       */
      public boolean hasSelftextHtml() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string selftext_html = 2;</code>
       */
      public java.lang.String getSelftextHtml() {
        java.lang.Object ref = selftextHtml_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          selftextHtml_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string selftext_html = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSelftextHtmlBytes() {
        java.lang.Object ref = selftextHtml_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          selftextHtml_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string selftext_html = 2;</code>
       */
      public Builder setSelftextHtml(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        selftextHtml_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string selftext_html = 2;</code>
       */
      public Builder clearSelftextHtml() {
        bitField0_ = (bitField0_ & ~0x00000002);
        selftextHtml_ = getDefaultInstance().getSelftextHtml();
        onChanged();
        return this;
      }
      /**
       * <code>required string selftext_html = 2;</code>
       */
      public Builder setSelftextHtmlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        selftextHtml_ = value;
        onChanged();
        return this;
      }

      // required int32 num_comments = 3;
      private int numComments_ ;
      /**
       * <code>required int32 num_comments = 3;</code>
       */
      public boolean hasNumComments() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 num_comments = 3;</code>
       */
      public int getNumComments() {
        return numComments_;
      }
      /**
       * <code>required int32 num_comments = 3;</code>
       */
      public Builder setNumComments(int value) {
        bitField0_ |= 0x00000004;
        numComments_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 num_comments = 3;</code>
       */
      public Builder clearNumComments() {
        bitField0_ = (bitField0_ & ~0x00000004);
        numComments_ = 0;
        onChanged();
        return this;
      }

      // required int32 score = 4;
      private int score_ ;
      /**
       * <code>required int32 score = 4;</code>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 score = 4;</code>
       */
      public int getScore() {
        return score_;
      }
      /**
       * <code>required int32 score = 4;</code>
       */
      public Builder setScore(int value) {
        bitField0_ |= 0x00000008;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 score = 4;</code>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000008);
        score_ = 0;
        onChanged();
        return this;
      }

      // repeated .Comment comments = 5;
      private java.util.List<redditanalysis.Reddit.Comment> comments_ =
        java.util.Collections.emptyList();
      private void ensureCommentsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          comments_ = new java.util.ArrayList<redditanalysis.Reddit.Comment>(comments_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          redditanalysis.Reddit.Comment, redditanalysis.Reddit.Comment.Builder, redditanalysis.Reddit.CommentOrBuilder> commentsBuilder_;

      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public java.util.List<redditanalysis.Reddit.Comment> getCommentsList() {
        if (commentsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(comments_);
        } else {
          return commentsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public int getCommentsCount() {
        if (commentsBuilder_ == null) {
          return comments_.size();
        } else {
          return commentsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public redditanalysis.Reddit.Comment getComments(int index) {
        if (commentsBuilder_ == null) {
          return comments_.get(index);
        } else {
          return commentsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public Builder setComments(
          int index, redditanalysis.Reddit.Comment value) {
        if (commentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommentsIsMutable();
          comments_.set(index, value);
          onChanged();
        } else {
          commentsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public Builder setComments(
          int index, redditanalysis.Reddit.Comment.Builder builderForValue) {
        if (commentsBuilder_ == null) {
          ensureCommentsIsMutable();
          comments_.set(index, builderForValue.build());
          onChanged();
        } else {
          commentsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public Builder addComments(redditanalysis.Reddit.Comment value) {
        if (commentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommentsIsMutable();
          comments_.add(value);
          onChanged();
        } else {
          commentsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public Builder addComments(
          int index, redditanalysis.Reddit.Comment value) {
        if (commentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommentsIsMutable();
          comments_.add(index, value);
          onChanged();
        } else {
          commentsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public Builder addComments(
          redditanalysis.Reddit.Comment.Builder builderForValue) {
        if (commentsBuilder_ == null) {
          ensureCommentsIsMutable();
          comments_.add(builderForValue.build());
          onChanged();
        } else {
          commentsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public Builder addComments(
          int index, redditanalysis.Reddit.Comment.Builder builderForValue) {
        if (commentsBuilder_ == null) {
          ensureCommentsIsMutable();
          comments_.add(index, builderForValue.build());
          onChanged();
        } else {
          commentsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public Builder addAllComments(
          java.lang.Iterable<? extends redditanalysis.Reddit.Comment> values) {
        if (commentsBuilder_ == null) {
          ensureCommentsIsMutable();
          super.addAll(values, comments_);
          onChanged();
        } else {
          commentsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public Builder clearComments() {
        if (commentsBuilder_ == null) {
          comments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          commentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public Builder removeComments(int index) {
        if (commentsBuilder_ == null) {
          ensureCommentsIsMutable();
          comments_.remove(index);
          onChanged();
        } else {
          commentsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public redditanalysis.Reddit.Comment.Builder getCommentsBuilder(
          int index) {
        return getCommentsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public redditanalysis.Reddit.CommentOrBuilder getCommentsOrBuilder(
          int index) {
        if (commentsBuilder_ == null) {
          return comments_.get(index);  } else {
          return commentsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public java.util.List<? extends redditanalysis.Reddit.CommentOrBuilder> 
           getCommentsOrBuilderList() {
        if (commentsBuilder_ != null) {
          return commentsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(comments_);
        }
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public redditanalysis.Reddit.Comment.Builder addCommentsBuilder() {
        return getCommentsFieldBuilder().addBuilder(
            redditanalysis.Reddit.Comment.getDefaultInstance());
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public redditanalysis.Reddit.Comment.Builder addCommentsBuilder(
          int index) {
        return getCommentsFieldBuilder().addBuilder(
            index, redditanalysis.Reddit.Comment.getDefaultInstance());
      }
      /**
       * <code>repeated .Comment comments = 5;</code>
       */
      public java.util.List<redditanalysis.Reddit.Comment.Builder> 
           getCommentsBuilderList() {
        return getCommentsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          redditanalysis.Reddit.Comment, redditanalysis.Reddit.Comment.Builder, redditanalysis.Reddit.CommentOrBuilder> 
          getCommentsFieldBuilder() {
        if (commentsBuilder_ == null) {
          commentsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              redditanalysis.Reddit.Comment, redditanalysis.Reddit.Comment.Builder, redditanalysis.Reddit.CommentOrBuilder>(
                  comments_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          comments_ = null;
        }
        return commentsBuilder_;
      }

      // repeated .Keyword keywords = 6;
      private java.util.List<redditanalysis.Reddit.Keyword> keywords_ =
        java.util.Collections.emptyList();
      private void ensureKeywordsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          keywords_ = new java.util.ArrayList<redditanalysis.Reddit.Keyword>(keywords_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          redditanalysis.Reddit.Keyword, redditanalysis.Reddit.Keyword.Builder, redditanalysis.Reddit.KeywordOrBuilder> keywordsBuilder_;

      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public java.util.List<redditanalysis.Reddit.Keyword> getKeywordsList() {
        if (keywordsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(keywords_);
        } else {
          return keywordsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public int getKeywordsCount() {
        if (keywordsBuilder_ == null) {
          return keywords_.size();
        } else {
          return keywordsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public redditanalysis.Reddit.Keyword getKeywords(int index) {
        if (keywordsBuilder_ == null) {
          return keywords_.get(index);
        } else {
          return keywordsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public Builder setKeywords(
          int index, redditanalysis.Reddit.Keyword value) {
        if (keywordsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeywordsIsMutable();
          keywords_.set(index, value);
          onChanged();
        } else {
          keywordsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public Builder setKeywords(
          int index, redditanalysis.Reddit.Keyword.Builder builderForValue) {
        if (keywordsBuilder_ == null) {
          ensureKeywordsIsMutable();
          keywords_.set(index, builderForValue.build());
          onChanged();
        } else {
          keywordsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public Builder addKeywords(redditanalysis.Reddit.Keyword value) {
        if (keywordsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeywordsIsMutable();
          keywords_.add(value);
          onChanged();
        } else {
          keywordsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public Builder addKeywords(
          int index, redditanalysis.Reddit.Keyword value) {
        if (keywordsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeywordsIsMutable();
          keywords_.add(index, value);
          onChanged();
        } else {
          keywordsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public Builder addKeywords(
          redditanalysis.Reddit.Keyword.Builder builderForValue) {
        if (keywordsBuilder_ == null) {
          ensureKeywordsIsMutable();
          keywords_.add(builderForValue.build());
          onChanged();
        } else {
          keywordsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public Builder addKeywords(
          int index, redditanalysis.Reddit.Keyword.Builder builderForValue) {
        if (keywordsBuilder_ == null) {
          ensureKeywordsIsMutable();
          keywords_.add(index, builderForValue.build());
          onChanged();
        } else {
          keywordsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public Builder addAllKeywords(
          java.lang.Iterable<? extends redditanalysis.Reddit.Keyword> values) {
        if (keywordsBuilder_ == null) {
          ensureKeywordsIsMutable();
          super.addAll(values, keywords_);
          onChanged();
        } else {
          keywordsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public Builder clearKeywords() {
        if (keywordsBuilder_ == null) {
          keywords_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          keywordsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public Builder removeKeywords(int index) {
        if (keywordsBuilder_ == null) {
          ensureKeywordsIsMutable();
          keywords_.remove(index);
          onChanged();
        } else {
          keywordsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public redditanalysis.Reddit.Keyword.Builder getKeywordsBuilder(
          int index) {
        return getKeywordsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public redditanalysis.Reddit.KeywordOrBuilder getKeywordsOrBuilder(
          int index) {
        if (keywordsBuilder_ == null) {
          return keywords_.get(index);  } else {
          return keywordsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public java.util.List<? extends redditanalysis.Reddit.KeywordOrBuilder> 
           getKeywordsOrBuilderList() {
        if (keywordsBuilder_ != null) {
          return keywordsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(keywords_);
        }
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public redditanalysis.Reddit.Keyword.Builder addKeywordsBuilder() {
        return getKeywordsFieldBuilder().addBuilder(
            redditanalysis.Reddit.Keyword.getDefaultInstance());
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public redditanalysis.Reddit.Keyword.Builder addKeywordsBuilder(
          int index) {
        return getKeywordsFieldBuilder().addBuilder(
            index, redditanalysis.Reddit.Keyword.getDefaultInstance());
      }
      /**
       * <code>repeated .Keyword keywords = 6;</code>
       */
      public java.util.List<redditanalysis.Reddit.Keyword.Builder> 
           getKeywordsBuilderList() {
        return getKeywordsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          redditanalysis.Reddit.Keyword, redditanalysis.Reddit.Keyword.Builder, redditanalysis.Reddit.KeywordOrBuilder> 
          getKeywordsFieldBuilder() {
        if (keywordsBuilder_ == null) {
          keywordsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              redditanalysis.Reddit.Keyword, redditanalysis.Reddit.Keyword.Builder, redditanalysis.Reddit.KeywordOrBuilder>(
                  keywords_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          keywords_ = null;
        }
        return keywordsBuilder_;
      }

      // required int32 ups = 7;
      private int ups_ ;
      /**
       * <code>required int32 ups = 7;</code>
       */
      public boolean hasUps() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 ups = 7;</code>
       */
      public int getUps() {
        return ups_;
      }
      /**
       * <code>required int32 ups = 7;</code>
       */
      public Builder setUps(int value) {
        bitField0_ |= 0x00000040;
        ups_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 ups = 7;</code>
       */
      public Builder clearUps() {
        bitField0_ = (bitField0_ & ~0x00000040);
        ups_ = 0;
        onChanged();
        return this;
      }

      // required string url = 8;
      private java.lang.Object url_ = "";
      /**
       * <code>required string url = 8;</code>
       */
      public boolean hasUrl() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required string url = 8;</code>
       */
      public java.lang.String getUrl() {
        java.lang.Object ref = url_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          url_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string url = 8;</code>
       */
      public com.google.protobuf.ByteString
          getUrlBytes() {
        java.lang.Object ref = url_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          url_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string url = 8;</code>
       */
      public Builder setUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        url_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string url = 8;</code>
       */
      public Builder clearUrl() {
        bitField0_ = (bitField0_ & ~0x00000080);
        url_ = getDefaultInstance().getUrl();
        onChanged();
        return this;
      }
      /**
       * <code>required string url = 8;</code>
       */
      public Builder setUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        url_ = value;
        onChanged();
        return this;
      }

      // required string title = 9;
      private java.lang.Object title_ = "";
      /**
       * <code>required string title = 9;</code>
       */
      public boolean hasTitle() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required string title = 9;</code>
       */
      public java.lang.String getTitle() {
        java.lang.Object ref = title_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          title_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string title = 9;</code>
       */
      public com.google.protobuf.ByteString
          getTitleBytes() {
        java.lang.Object ref = title_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          title_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string title = 9;</code>
       */
      public Builder setTitle(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        title_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string title = 9;</code>
       */
      public Builder clearTitle() {
        bitField0_ = (bitField0_ & ~0x00000100);
        title_ = getDefaultInstance().getTitle();
        onChanged();
        return this;
      }
      /**
       * <code>required string title = 9;</code>
       */
      public Builder setTitleBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        title_ = value;
        onChanged();
        return this;
      }

      // required int32 downs = 10;
      private int downs_ ;
      /**
       * <code>required int32 downs = 10;</code>
       */
      public boolean hasDowns() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required int32 downs = 10;</code>
       */
      public int getDowns() {
        return downs_;
      }
      /**
       * <code>required int32 downs = 10;</code>
       */
      public Builder setDowns(int value) {
        bitField0_ |= 0x00000200;
        downs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 downs = 10;</code>
       */
      public Builder clearDowns() {
        bitField0_ = (bitField0_ & ~0x00000200);
        downs_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SubRedditData)
    }

    static {
      defaultInstance = new SubRedditData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SubRedditData)
  }

  public interface SubRedditOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 rank = 1;
    /**
     * <code>required int32 rank = 1;</code>
     */
    boolean hasRank();
    /**
     * <code>required int32 rank = 1;</code>
     */
    int getRank();

    // required string subreddit_title = 2;
    /**
     * <code>required string subreddit_title = 2;</code>
     */
    boolean hasSubredditTitle();
    /**
     * <code>required string subreddit_title = 2;</code>
     */
    java.lang.String getSubredditTitle();
    /**
     * <code>required string subreddit_title = 2;</code>
     */
    com.google.protobuf.ByteString
        getSubredditTitleBytes();

    // required string url = 3;
    /**
     * <code>required string url = 3;</code>
     */
    boolean hasUrl();
    /**
     * <code>required string url = 3;</code>
     */
    java.lang.String getUrl();
    /**
     * <code>required string url = 3;</code>
     */
    com.google.protobuf.ByteString
        getUrlBytes();

    // optional int32 subscribers = 4;
    /**
     * <code>optional int32 subscribers = 4;</code>
     */
    boolean hasSubscribers();
    /**
     * <code>optional int32 subscribers = 4;</code>
     */
    int getSubscribers();

    // optional float growth_rate = 5;
    /**
     * <code>optional float growth_rate = 5;</code>
     */
    boolean hasGrowthRate();
    /**
     * <code>optional float growth_rate = 5;</code>
     */
    float getGrowthRate();

    // repeated .SubRedditData subreddit_data = 6;
    /**
     * <code>repeated .SubRedditData subreddit_data = 6;</code>
     */
    java.util.List<redditanalysis.Reddit.SubRedditData> 
        getSubredditDataList();
    /**
     * <code>repeated .SubRedditData subreddit_data = 6;</code>
     */
    redditanalysis.Reddit.SubRedditData getSubredditData(int index);
    /**
     * <code>repeated .SubRedditData subreddit_data = 6;</code>
     */
    int getSubredditDataCount();
    /**
     * <code>repeated .SubRedditData subreddit_data = 6;</code>
     */
    java.util.List<? extends redditanalysis.Reddit.SubRedditDataOrBuilder> 
        getSubredditDataOrBuilderList();
    /**
     * <code>repeated .SubRedditData subreddit_data = 6;</code>
     */
    redditanalysis.Reddit.SubRedditDataOrBuilder getSubredditDataOrBuilder(
        int index);

    // required int64 timestamp = 7;
    /**
     * <code>required int64 timestamp = 7;</code>
     */
    boolean hasTimestamp();
    /**
     * <code>required int64 timestamp = 7;</code>
     */
    long getTimestamp();
  }
  /**
   * Protobuf type {@code SubReddit}
   */
  public static final class SubReddit extends
      com.google.protobuf.GeneratedMessage
      implements SubRedditOrBuilder {
    // Use SubReddit.newBuilder() to construct.
    private SubReddit(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SubReddit(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SubReddit defaultInstance;
    public static SubReddit getDefaultInstance() {
      return defaultInstance;
    }

    public SubReddit getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SubReddit(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              rank_ = input.readInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              subredditTitle_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              url_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              subscribers_ = input.readInt32();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              growthRate_ = input.readFloat();
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                subredditData_ = new java.util.ArrayList<redditanalysis.Reddit.SubRedditData>();
                mutable_bitField0_ |= 0x00000020;
              }
              subredditData_.add(input.readMessage(redditanalysis.Reddit.SubRedditData.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              timestamp_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          subredditData_ = java.util.Collections.unmodifiableList(subredditData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return redditanalysis.Reddit.internal_static_SubReddit_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return redditanalysis.Reddit.internal_static_SubReddit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              redditanalysis.Reddit.SubReddit.class, redditanalysis.Reddit.SubReddit.Builder.class);
    }

    public static com.google.protobuf.Parser<SubReddit> PARSER =
        new com.google.protobuf.AbstractParser<SubReddit>() {
      public SubReddit parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SubReddit(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SubReddit> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 rank = 1;
    public static final int RANK_FIELD_NUMBER = 1;
    private int rank_;
    /**
     * <code>required int32 rank = 1;</code>
     */
    public boolean hasRank() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 rank = 1;</code>
     */
    public int getRank() {
      return rank_;
    }

    // required string subreddit_title = 2;
    public static final int SUBREDDIT_TITLE_FIELD_NUMBER = 2;
    private java.lang.Object subredditTitle_;
    /**
     * <code>required string subreddit_title = 2;</code>
     */
    public boolean hasSubredditTitle() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string subreddit_title = 2;</code>
     */
    public java.lang.String getSubredditTitle() {
      java.lang.Object ref = subredditTitle_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          subredditTitle_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string subreddit_title = 2;</code>
     */
    public com.google.protobuf.ByteString
        getSubredditTitleBytes() {
      java.lang.Object ref = subredditTitle_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        subredditTitle_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string url = 3;
    public static final int URL_FIELD_NUMBER = 3;
    private java.lang.Object url_;
    /**
     * <code>required string url = 3;</code>
     */
    public boolean hasUrl() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required string url = 3;</code>
     */
    public java.lang.String getUrl() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          url_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string url = 3;</code>
     */
    public com.google.protobuf.ByteString
        getUrlBytes() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        url_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 subscribers = 4;
    public static final int SUBSCRIBERS_FIELD_NUMBER = 4;
    private int subscribers_;
    /**
     * <code>optional int32 subscribers = 4;</code>
     */
    public boolean hasSubscribers() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 subscribers = 4;</code>
     */
    public int getSubscribers() {
      return subscribers_;
    }

    // optional float growth_rate = 5;
    public static final int GROWTH_RATE_FIELD_NUMBER = 5;
    private float growthRate_;
    /**
     * <code>optional float growth_rate = 5;</code>
     */
    public boolean hasGrowthRate() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float growth_rate = 5;</code>
     */
    public float getGrowthRate() {
      return growthRate_;
    }

    // repeated .SubRedditData subreddit_data = 6;
    public static final int SUBREDDIT_DATA_FIELD_NUMBER = 6;
    private java.util.List<redditanalysis.Reddit.SubRedditData> subredditData_;
    /**
     * <code>repeated .SubRedditData subreddit_data = 6;</code>
     */
    public java.util.List<redditanalysis.Reddit.SubRedditData> getSubredditDataList() {
      return subredditData_;
    }
    /**
     * <code>repeated .SubRedditData subreddit_data = 6;</code>
     */
    public java.util.List<? extends redditanalysis.Reddit.SubRedditDataOrBuilder> 
        getSubredditDataOrBuilderList() {
      return subredditData_;
    }
    /**
     * <code>repeated .SubRedditData subreddit_data = 6;</code>
     */
    public int getSubredditDataCount() {
      return subredditData_.size();
    }
    /**
     * <code>repeated .SubRedditData subreddit_data = 6;</code>
     */
    public redditanalysis.Reddit.SubRedditData getSubredditData(int index) {
      return subredditData_.get(index);
    }
    /**
     * <code>repeated .SubRedditData subreddit_data = 6;</code>
     */
    public redditanalysis.Reddit.SubRedditDataOrBuilder getSubredditDataOrBuilder(
        int index) {
      return subredditData_.get(index);
    }

    // required int64 timestamp = 7;
    public static final int TIMESTAMP_FIELD_NUMBER = 7;
    private long timestamp_;
    /**
     * <code>required int64 timestamp = 7;</code>
     */
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int64 timestamp = 7;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    private void initFields() {
      rank_ = 0;
      subredditTitle_ = "";
      url_ = "";
      subscribers_ = 0;
      growthRate_ = 0F;
      subredditData_ = java.util.Collections.emptyList();
      timestamp_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasRank()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSubredditTitle()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUrl()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTimestamp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSubredditDataCount(); i++) {
        if (!getSubredditData(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, rank_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getSubredditTitleBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getUrlBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, subscribers_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, growthRate_);
      }
      for (int i = 0; i < subredditData_.size(); i++) {
        output.writeMessage(6, subredditData_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt64(7, timestamp_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, rank_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getSubredditTitleBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getUrlBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, subscribers_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, growthRate_);
      }
      for (int i = 0; i < subredditData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, subredditData_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, timestamp_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static redditanalysis.Reddit.SubReddit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static redditanalysis.Reddit.SubReddit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static redditanalysis.Reddit.SubReddit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static redditanalysis.Reddit.SubReddit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static redditanalysis.Reddit.SubReddit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static redditanalysis.Reddit.SubReddit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static redditanalysis.Reddit.SubReddit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static redditanalysis.Reddit.SubReddit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static redditanalysis.Reddit.SubReddit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static redditanalysis.Reddit.SubReddit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(redditanalysis.Reddit.SubReddit prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SubReddit}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements redditanalysis.Reddit.SubRedditOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return redditanalysis.Reddit.internal_static_SubReddit_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return redditanalysis.Reddit.internal_static_SubReddit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                redditanalysis.Reddit.SubReddit.class, redditanalysis.Reddit.SubReddit.Builder.class);
      }

      // Construct using redditanalysis.Reddit.SubReddit.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSubredditDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        rank_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        subredditTitle_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        url_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        subscribers_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        growthRate_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (subredditDataBuilder_ == null) {
          subredditData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          subredditDataBuilder_.clear();
        }
        timestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return redditanalysis.Reddit.internal_static_SubReddit_descriptor;
      }

      public redditanalysis.Reddit.SubReddit getDefaultInstanceForType() {
        return redditanalysis.Reddit.SubReddit.getDefaultInstance();
      }

      public redditanalysis.Reddit.SubReddit build() {
        redditanalysis.Reddit.SubReddit result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public redditanalysis.Reddit.SubReddit buildPartial() {
        redditanalysis.Reddit.SubReddit result = new redditanalysis.Reddit.SubReddit(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.rank_ = rank_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.subredditTitle_ = subredditTitle_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.url_ = url_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.subscribers_ = subscribers_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.growthRate_ = growthRate_;
        if (subredditDataBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            subredditData_ = java.util.Collections.unmodifiableList(subredditData_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.subredditData_ = subredditData_;
        } else {
          result.subredditData_ = subredditDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.timestamp_ = timestamp_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof redditanalysis.Reddit.SubReddit) {
          return mergeFrom((redditanalysis.Reddit.SubReddit)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(redditanalysis.Reddit.SubReddit other) {
        if (other == redditanalysis.Reddit.SubReddit.getDefaultInstance()) return this;
        if (other.hasRank()) {
          setRank(other.getRank());
        }
        if (other.hasSubredditTitle()) {
          bitField0_ |= 0x00000002;
          subredditTitle_ = other.subredditTitle_;
          onChanged();
        }
        if (other.hasUrl()) {
          bitField0_ |= 0x00000004;
          url_ = other.url_;
          onChanged();
        }
        if (other.hasSubscribers()) {
          setSubscribers(other.getSubscribers());
        }
        if (other.hasGrowthRate()) {
          setGrowthRate(other.getGrowthRate());
        }
        if (subredditDataBuilder_ == null) {
          if (!other.subredditData_.isEmpty()) {
            if (subredditData_.isEmpty()) {
              subredditData_ = other.subredditData_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureSubredditDataIsMutable();
              subredditData_.addAll(other.subredditData_);
            }
            onChanged();
          }
        } else {
          if (!other.subredditData_.isEmpty()) {
            if (subredditDataBuilder_.isEmpty()) {
              subredditDataBuilder_.dispose();
              subredditDataBuilder_ = null;
              subredditData_ = other.subredditData_;
              bitField0_ = (bitField0_ & ~0x00000020);
              subredditDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSubredditDataFieldBuilder() : null;
            } else {
              subredditDataBuilder_.addAllMessages(other.subredditData_);
            }
          }
        }
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRank()) {
          
          return false;
        }
        if (!hasSubredditTitle()) {
          
          return false;
        }
        if (!hasUrl()) {
          
          return false;
        }
        if (!hasTimestamp()) {
          
          return false;
        }
        for (int i = 0; i < getSubredditDataCount(); i++) {
          if (!getSubredditData(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        redditanalysis.Reddit.SubReddit parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (redditanalysis.Reddit.SubReddit) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 rank = 1;
      private int rank_ ;
      /**
       * <code>required int32 rank = 1;</code>
       */
      public boolean hasRank() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 rank = 1;</code>
       */
      public int getRank() {
        return rank_;
      }
      /**
       * <code>required int32 rank = 1;</code>
       */
      public Builder setRank(int value) {
        bitField0_ |= 0x00000001;
        rank_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 rank = 1;</code>
       */
      public Builder clearRank() {
        bitField0_ = (bitField0_ & ~0x00000001);
        rank_ = 0;
        onChanged();
        return this;
      }

      // required string subreddit_title = 2;
      private java.lang.Object subredditTitle_ = "";
      /**
       * <code>required string subreddit_title = 2;</code>
       */
      public boolean hasSubredditTitle() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string subreddit_title = 2;</code>
       */
      public java.lang.String getSubredditTitle() {
        java.lang.Object ref = subredditTitle_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          subredditTitle_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string subreddit_title = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSubredditTitleBytes() {
        java.lang.Object ref = subredditTitle_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          subredditTitle_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string subreddit_title = 2;</code>
       */
      public Builder setSubredditTitle(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        subredditTitle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string subreddit_title = 2;</code>
       */
      public Builder clearSubredditTitle() {
        bitField0_ = (bitField0_ & ~0x00000002);
        subredditTitle_ = getDefaultInstance().getSubredditTitle();
        onChanged();
        return this;
      }
      /**
       * <code>required string subreddit_title = 2;</code>
       */
      public Builder setSubredditTitleBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        subredditTitle_ = value;
        onChanged();
        return this;
      }

      // required string url = 3;
      private java.lang.Object url_ = "";
      /**
       * <code>required string url = 3;</code>
       */
      public boolean hasUrl() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string url = 3;</code>
       */
      public java.lang.String getUrl() {
        java.lang.Object ref = url_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          url_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string url = 3;</code>
       */
      public com.google.protobuf.ByteString
          getUrlBytes() {
        java.lang.Object ref = url_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          url_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string url = 3;</code>
       */
      public Builder setUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        url_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string url = 3;</code>
       */
      public Builder clearUrl() {
        bitField0_ = (bitField0_ & ~0x00000004);
        url_ = getDefaultInstance().getUrl();
        onChanged();
        return this;
      }
      /**
       * <code>required string url = 3;</code>
       */
      public Builder setUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        url_ = value;
        onChanged();
        return this;
      }

      // optional int32 subscribers = 4;
      private int subscribers_ ;
      /**
       * <code>optional int32 subscribers = 4;</code>
       */
      public boolean hasSubscribers() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 subscribers = 4;</code>
       */
      public int getSubscribers() {
        return subscribers_;
      }
      /**
       * <code>optional int32 subscribers = 4;</code>
       */
      public Builder setSubscribers(int value) {
        bitField0_ |= 0x00000008;
        subscribers_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 subscribers = 4;</code>
       */
      public Builder clearSubscribers() {
        bitField0_ = (bitField0_ & ~0x00000008);
        subscribers_ = 0;
        onChanged();
        return this;
      }

      // optional float growth_rate = 5;
      private float growthRate_ ;
      /**
       * <code>optional float growth_rate = 5;</code>
       */
      public boolean hasGrowthRate() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float growth_rate = 5;</code>
       */
      public float getGrowthRate() {
        return growthRate_;
      }
      /**
       * <code>optional float growth_rate = 5;</code>
       */
      public Builder setGrowthRate(float value) {
        bitField0_ |= 0x00000010;
        growthRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float growth_rate = 5;</code>
       */
      public Builder clearGrowthRate() {
        bitField0_ = (bitField0_ & ~0x00000010);
        growthRate_ = 0F;
        onChanged();
        return this;
      }

      // repeated .SubRedditData subreddit_data = 6;
      private java.util.List<redditanalysis.Reddit.SubRedditData> subredditData_ =
        java.util.Collections.emptyList();
      private void ensureSubredditDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          subredditData_ = new java.util.ArrayList<redditanalysis.Reddit.SubRedditData>(subredditData_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          redditanalysis.Reddit.SubRedditData, redditanalysis.Reddit.SubRedditData.Builder, redditanalysis.Reddit.SubRedditDataOrBuilder> subredditDataBuilder_;

      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public java.util.List<redditanalysis.Reddit.SubRedditData> getSubredditDataList() {
        if (subredditDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(subredditData_);
        } else {
          return subredditDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public int getSubredditDataCount() {
        if (subredditDataBuilder_ == null) {
          return subredditData_.size();
        } else {
          return subredditDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public redditanalysis.Reddit.SubRedditData getSubredditData(int index) {
        if (subredditDataBuilder_ == null) {
          return subredditData_.get(index);
        } else {
          return subredditDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public Builder setSubredditData(
          int index, redditanalysis.Reddit.SubRedditData value) {
        if (subredditDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubredditDataIsMutable();
          subredditData_.set(index, value);
          onChanged();
        } else {
          subredditDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public Builder setSubredditData(
          int index, redditanalysis.Reddit.SubRedditData.Builder builderForValue) {
        if (subredditDataBuilder_ == null) {
          ensureSubredditDataIsMutable();
          subredditData_.set(index, builderForValue.build());
          onChanged();
        } else {
          subredditDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public Builder addSubredditData(redditanalysis.Reddit.SubRedditData value) {
        if (subredditDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubredditDataIsMutable();
          subredditData_.add(value);
          onChanged();
        } else {
          subredditDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public Builder addSubredditData(
          int index, redditanalysis.Reddit.SubRedditData value) {
        if (subredditDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubredditDataIsMutable();
          subredditData_.add(index, value);
          onChanged();
        } else {
          subredditDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public Builder addSubredditData(
          redditanalysis.Reddit.SubRedditData.Builder builderForValue) {
        if (subredditDataBuilder_ == null) {
          ensureSubredditDataIsMutable();
          subredditData_.add(builderForValue.build());
          onChanged();
        } else {
          subredditDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public Builder addSubredditData(
          int index, redditanalysis.Reddit.SubRedditData.Builder builderForValue) {
        if (subredditDataBuilder_ == null) {
          ensureSubredditDataIsMutable();
          subredditData_.add(index, builderForValue.build());
          onChanged();
        } else {
          subredditDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public Builder addAllSubredditData(
          java.lang.Iterable<? extends redditanalysis.Reddit.SubRedditData> values) {
        if (subredditDataBuilder_ == null) {
          ensureSubredditDataIsMutable();
          super.addAll(values, subredditData_);
          onChanged();
        } else {
          subredditDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public Builder clearSubredditData() {
        if (subredditDataBuilder_ == null) {
          subredditData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          subredditDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public Builder removeSubredditData(int index) {
        if (subredditDataBuilder_ == null) {
          ensureSubredditDataIsMutable();
          subredditData_.remove(index);
          onChanged();
        } else {
          subredditDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public redditanalysis.Reddit.SubRedditData.Builder getSubredditDataBuilder(
          int index) {
        return getSubredditDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public redditanalysis.Reddit.SubRedditDataOrBuilder getSubredditDataOrBuilder(
          int index) {
        if (subredditDataBuilder_ == null) {
          return subredditData_.get(index);  } else {
          return subredditDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public java.util.List<? extends redditanalysis.Reddit.SubRedditDataOrBuilder> 
           getSubredditDataOrBuilderList() {
        if (subredditDataBuilder_ != null) {
          return subredditDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(subredditData_);
        }
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public redditanalysis.Reddit.SubRedditData.Builder addSubredditDataBuilder() {
        return getSubredditDataFieldBuilder().addBuilder(
            redditanalysis.Reddit.SubRedditData.getDefaultInstance());
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public redditanalysis.Reddit.SubRedditData.Builder addSubredditDataBuilder(
          int index) {
        return getSubredditDataFieldBuilder().addBuilder(
            index, redditanalysis.Reddit.SubRedditData.getDefaultInstance());
      }
      /**
       * <code>repeated .SubRedditData subreddit_data = 6;</code>
       */
      public java.util.List<redditanalysis.Reddit.SubRedditData.Builder> 
           getSubredditDataBuilderList() {
        return getSubredditDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          redditanalysis.Reddit.SubRedditData, redditanalysis.Reddit.SubRedditData.Builder, redditanalysis.Reddit.SubRedditDataOrBuilder> 
          getSubredditDataFieldBuilder() {
        if (subredditDataBuilder_ == null) {
          subredditDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              redditanalysis.Reddit.SubRedditData, redditanalysis.Reddit.SubRedditData.Builder, redditanalysis.Reddit.SubRedditDataOrBuilder>(
                  subredditData_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          subredditData_ = null;
        }
        return subredditDataBuilder_;
      }

      // required int64 timestamp = 7;
      private long timestamp_ ;
      /**
       * <code>required int64 timestamp = 7;</code>
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int64 timestamp = 7;</code>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>required int64 timestamp = 7;</code>
       */
      public Builder setTimestamp(long value) {
        bitField0_ |= 0x00000040;
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 timestamp = 7;</code>
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000040);
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SubReddit)
    }

    static {
      defaultInstance = new SubReddit(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SubReddit)
  }

  public interface RedditsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .SubReddit recent_activity = 1;
    /**
     * <code>repeated .SubReddit recent_activity = 1;</code>
     */
    java.util.List<redditanalysis.Reddit.SubReddit> 
        getRecentActivityList();
    /**
     * <code>repeated .SubReddit recent_activity = 1;</code>
     */
    redditanalysis.Reddit.SubReddit getRecentActivity(int index);
    /**
     * <code>repeated .SubReddit recent_activity = 1;</code>
     */
    int getRecentActivityCount();
    /**
     * <code>repeated .SubReddit recent_activity = 1;</code>
     */
    java.util.List<? extends redditanalysis.Reddit.SubRedditOrBuilder> 
        getRecentActivityOrBuilderList();
    /**
     * <code>repeated .SubReddit recent_activity = 1;</code>
     */
    redditanalysis.Reddit.SubRedditOrBuilder getRecentActivityOrBuilder(
        int index);

    // repeated .SubReddit subscribers = 2;
    /**
     * <code>repeated .SubReddit subscribers = 2;</code>
     */
    java.util.List<redditanalysis.Reddit.SubReddit> 
        getSubscribersList();
    /**
     * <code>repeated .SubReddit subscribers = 2;</code>
     */
    redditanalysis.Reddit.SubReddit getSubscribers(int index);
    /**
     * <code>repeated .SubReddit subscribers = 2;</code>
     */
    int getSubscribersCount();
    /**
     * <code>repeated .SubReddit subscribers = 2;</code>
     */
    java.util.List<? extends redditanalysis.Reddit.SubRedditOrBuilder> 
        getSubscribersOrBuilderList();
    /**
     * <code>repeated .SubReddit subscribers = 2;</code>
     */
    redditanalysis.Reddit.SubRedditOrBuilder getSubscribersOrBuilder(
        int index);

    // repeated .SubReddit growth_over_24h = 3;
    /**
     * <code>repeated .SubReddit growth_over_24h = 3;</code>
     */
    java.util.List<redditanalysis.Reddit.SubReddit> 
        getGrowthOver24HList();
    /**
     * <code>repeated .SubReddit growth_over_24h = 3;</code>
     */
    redditanalysis.Reddit.SubReddit getGrowthOver24H(int index);
    /**
     * <code>repeated .SubReddit growth_over_24h = 3;</code>
     */
    int getGrowthOver24HCount();
    /**
     * <code>repeated .SubReddit growth_over_24h = 3;</code>
     */
    java.util.List<? extends redditanalysis.Reddit.SubRedditOrBuilder> 
        getGrowthOver24HOrBuilderList();
    /**
     * <code>repeated .SubReddit growth_over_24h = 3;</code>
     */
    redditanalysis.Reddit.SubRedditOrBuilder getGrowthOver24HOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Reddits}
   */
  public static final class Reddits extends
      com.google.protobuf.GeneratedMessage
      implements RedditsOrBuilder {
    // Use Reddits.newBuilder() to construct.
    private Reddits(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Reddits(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Reddits defaultInstance;
    public static Reddits getDefaultInstance() {
      return defaultInstance;
    }

    public Reddits getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Reddits(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                recentActivity_ = new java.util.ArrayList<redditanalysis.Reddit.SubReddit>();
                mutable_bitField0_ |= 0x00000001;
              }
              recentActivity_.add(input.readMessage(redditanalysis.Reddit.SubReddit.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                subscribers_ = new java.util.ArrayList<redditanalysis.Reddit.SubReddit>();
                mutable_bitField0_ |= 0x00000002;
              }
              subscribers_.add(input.readMessage(redditanalysis.Reddit.SubReddit.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                growthOver24H_ = new java.util.ArrayList<redditanalysis.Reddit.SubReddit>();
                mutable_bitField0_ |= 0x00000004;
              }
              growthOver24H_.add(input.readMessage(redditanalysis.Reddit.SubReddit.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          recentActivity_ = java.util.Collections.unmodifiableList(recentActivity_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          subscribers_ = java.util.Collections.unmodifiableList(subscribers_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          growthOver24H_ = java.util.Collections.unmodifiableList(growthOver24H_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return redditanalysis.Reddit.internal_static_Reddits_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return redditanalysis.Reddit.internal_static_Reddits_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              redditanalysis.Reddit.Reddits.class, redditanalysis.Reddit.Reddits.Builder.class);
    }

    public static com.google.protobuf.Parser<Reddits> PARSER =
        new com.google.protobuf.AbstractParser<Reddits>() {
      public Reddits parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Reddits(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Reddits> getParserForType() {
      return PARSER;
    }

    // repeated .SubReddit recent_activity = 1;
    public static final int RECENT_ACTIVITY_FIELD_NUMBER = 1;
    private java.util.List<redditanalysis.Reddit.SubReddit> recentActivity_;
    /**
     * <code>repeated .SubReddit recent_activity = 1;</code>
     */
    public java.util.List<redditanalysis.Reddit.SubReddit> getRecentActivityList() {
      return recentActivity_;
    }
    /**
     * <code>repeated .SubReddit recent_activity = 1;</code>
     */
    public java.util.List<? extends redditanalysis.Reddit.SubRedditOrBuilder> 
        getRecentActivityOrBuilderList() {
      return recentActivity_;
    }
    /**
     * <code>repeated .SubReddit recent_activity = 1;</code>
     */
    public int getRecentActivityCount() {
      return recentActivity_.size();
    }
    /**
     * <code>repeated .SubReddit recent_activity = 1;</code>
     */
    public redditanalysis.Reddit.SubReddit getRecentActivity(int index) {
      return recentActivity_.get(index);
    }
    /**
     * <code>repeated .SubReddit recent_activity = 1;</code>
     */
    public redditanalysis.Reddit.SubRedditOrBuilder getRecentActivityOrBuilder(
        int index) {
      return recentActivity_.get(index);
    }

    // repeated .SubReddit subscribers = 2;
    public static final int SUBSCRIBERS_FIELD_NUMBER = 2;
    private java.util.List<redditanalysis.Reddit.SubReddit> subscribers_;
    /**
     * <code>repeated .SubReddit subscribers = 2;</code>
     */
    public java.util.List<redditanalysis.Reddit.SubReddit> getSubscribersList() {
      return subscribers_;
    }
    /**
     * <code>repeated .SubReddit subscribers = 2;</code>
     */
    public java.util.List<? extends redditanalysis.Reddit.SubRedditOrBuilder> 
        getSubscribersOrBuilderList() {
      return subscribers_;
    }
    /**
     * <code>repeated .SubReddit subscribers = 2;</code>
     */
    public int getSubscribersCount() {
      return subscribers_.size();
    }
    /**
     * <code>repeated .SubReddit subscribers = 2;</code>
     */
    public redditanalysis.Reddit.SubReddit getSubscribers(int index) {
      return subscribers_.get(index);
    }
    /**
     * <code>repeated .SubReddit subscribers = 2;</code>
     */
    public redditanalysis.Reddit.SubRedditOrBuilder getSubscribersOrBuilder(
        int index) {
      return subscribers_.get(index);
    }

    // repeated .SubReddit growth_over_24h = 3;
    public static final int GROWTH_OVER_24H_FIELD_NUMBER = 3;
    private java.util.List<redditanalysis.Reddit.SubReddit> growthOver24H_;
    /**
     * <code>repeated .SubReddit growth_over_24h = 3;</code>
     */
    public java.util.List<redditanalysis.Reddit.SubReddit> getGrowthOver24HList() {
      return growthOver24H_;
    }
    /**
     * <code>repeated .SubReddit growth_over_24h = 3;</code>
     */
    public java.util.List<? extends redditanalysis.Reddit.SubRedditOrBuilder> 
        getGrowthOver24HOrBuilderList() {
      return growthOver24H_;
    }
    /**
     * <code>repeated .SubReddit growth_over_24h = 3;</code>
     */
    public int getGrowthOver24HCount() {
      return growthOver24H_.size();
    }
    /**
     * <code>repeated .SubReddit growth_over_24h = 3;</code>
     */
    public redditanalysis.Reddit.SubReddit getGrowthOver24H(int index) {
      return growthOver24H_.get(index);
    }
    /**
     * <code>repeated .SubReddit growth_over_24h = 3;</code>
     */
    public redditanalysis.Reddit.SubRedditOrBuilder getGrowthOver24HOrBuilder(
        int index) {
      return growthOver24H_.get(index);
    }

    private void initFields() {
      recentActivity_ = java.util.Collections.emptyList();
      subscribers_ = java.util.Collections.emptyList();
      growthOver24H_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getRecentActivityCount(); i++) {
        if (!getRecentActivity(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getSubscribersCount(); i++) {
        if (!getSubscribers(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getGrowthOver24HCount(); i++) {
        if (!getGrowthOver24H(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < recentActivity_.size(); i++) {
        output.writeMessage(1, recentActivity_.get(i));
      }
      for (int i = 0; i < subscribers_.size(); i++) {
        output.writeMessage(2, subscribers_.get(i));
      }
      for (int i = 0; i < growthOver24H_.size(); i++) {
        output.writeMessage(3, growthOver24H_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < recentActivity_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, recentActivity_.get(i));
      }
      for (int i = 0; i < subscribers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, subscribers_.get(i));
      }
      for (int i = 0; i < growthOver24H_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, growthOver24H_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static redditanalysis.Reddit.Reddits parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static redditanalysis.Reddit.Reddits parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static redditanalysis.Reddit.Reddits parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static redditanalysis.Reddit.Reddits parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static redditanalysis.Reddit.Reddits parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static redditanalysis.Reddit.Reddits parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static redditanalysis.Reddit.Reddits parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static redditanalysis.Reddit.Reddits parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static redditanalysis.Reddit.Reddits parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static redditanalysis.Reddit.Reddits parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(redditanalysis.Reddit.Reddits prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Reddits}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements redditanalysis.Reddit.RedditsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return redditanalysis.Reddit.internal_static_Reddits_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return redditanalysis.Reddit.internal_static_Reddits_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                redditanalysis.Reddit.Reddits.class, redditanalysis.Reddit.Reddits.Builder.class);
      }

      // Construct using redditanalysis.Reddit.Reddits.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRecentActivityFieldBuilder();
          getSubscribersFieldBuilder();
          getGrowthOver24HFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (recentActivityBuilder_ == null) {
          recentActivity_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          recentActivityBuilder_.clear();
        }
        if (subscribersBuilder_ == null) {
          subscribers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          subscribersBuilder_.clear();
        }
        if (growthOver24HBuilder_ == null) {
          growthOver24H_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          growthOver24HBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return redditanalysis.Reddit.internal_static_Reddits_descriptor;
      }

      public redditanalysis.Reddit.Reddits getDefaultInstanceForType() {
        return redditanalysis.Reddit.Reddits.getDefaultInstance();
      }

      public redditanalysis.Reddit.Reddits build() {
        redditanalysis.Reddit.Reddits result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public redditanalysis.Reddit.Reddits buildPartial() {
        redditanalysis.Reddit.Reddits result = new redditanalysis.Reddit.Reddits(this);
        int from_bitField0_ = bitField0_;
        if (recentActivityBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            recentActivity_ = java.util.Collections.unmodifiableList(recentActivity_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.recentActivity_ = recentActivity_;
        } else {
          result.recentActivity_ = recentActivityBuilder_.build();
        }
        if (subscribersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            subscribers_ = java.util.Collections.unmodifiableList(subscribers_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.subscribers_ = subscribers_;
        } else {
          result.subscribers_ = subscribersBuilder_.build();
        }
        if (growthOver24HBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            growthOver24H_ = java.util.Collections.unmodifiableList(growthOver24H_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.growthOver24H_ = growthOver24H_;
        } else {
          result.growthOver24H_ = growthOver24HBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof redditanalysis.Reddit.Reddits) {
          return mergeFrom((redditanalysis.Reddit.Reddits)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(redditanalysis.Reddit.Reddits other) {
        if (other == redditanalysis.Reddit.Reddits.getDefaultInstance()) return this;
        if (recentActivityBuilder_ == null) {
          if (!other.recentActivity_.isEmpty()) {
            if (recentActivity_.isEmpty()) {
              recentActivity_ = other.recentActivity_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureRecentActivityIsMutable();
              recentActivity_.addAll(other.recentActivity_);
            }
            onChanged();
          }
        } else {
          if (!other.recentActivity_.isEmpty()) {
            if (recentActivityBuilder_.isEmpty()) {
              recentActivityBuilder_.dispose();
              recentActivityBuilder_ = null;
              recentActivity_ = other.recentActivity_;
              bitField0_ = (bitField0_ & ~0x00000001);
              recentActivityBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRecentActivityFieldBuilder() : null;
            } else {
              recentActivityBuilder_.addAllMessages(other.recentActivity_);
            }
          }
        }
        if (subscribersBuilder_ == null) {
          if (!other.subscribers_.isEmpty()) {
            if (subscribers_.isEmpty()) {
              subscribers_ = other.subscribers_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSubscribersIsMutable();
              subscribers_.addAll(other.subscribers_);
            }
            onChanged();
          }
        } else {
          if (!other.subscribers_.isEmpty()) {
            if (subscribersBuilder_.isEmpty()) {
              subscribersBuilder_.dispose();
              subscribersBuilder_ = null;
              subscribers_ = other.subscribers_;
              bitField0_ = (bitField0_ & ~0x00000002);
              subscribersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSubscribersFieldBuilder() : null;
            } else {
              subscribersBuilder_.addAllMessages(other.subscribers_);
            }
          }
        }
        if (growthOver24HBuilder_ == null) {
          if (!other.growthOver24H_.isEmpty()) {
            if (growthOver24H_.isEmpty()) {
              growthOver24H_ = other.growthOver24H_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureGrowthOver24HIsMutable();
              growthOver24H_.addAll(other.growthOver24H_);
            }
            onChanged();
          }
        } else {
          if (!other.growthOver24H_.isEmpty()) {
            if (growthOver24HBuilder_.isEmpty()) {
              growthOver24HBuilder_.dispose();
              growthOver24HBuilder_ = null;
              growthOver24H_ = other.growthOver24H_;
              bitField0_ = (bitField0_ & ~0x00000004);
              growthOver24HBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getGrowthOver24HFieldBuilder() : null;
            } else {
              growthOver24HBuilder_.addAllMessages(other.growthOver24H_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getRecentActivityCount(); i++) {
          if (!getRecentActivity(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getSubscribersCount(); i++) {
          if (!getSubscribers(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getGrowthOver24HCount(); i++) {
          if (!getGrowthOver24H(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        redditanalysis.Reddit.Reddits parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (redditanalysis.Reddit.Reddits) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .SubReddit recent_activity = 1;
      private java.util.List<redditanalysis.Reddit.SubReddit> recentActivity_ =
        java.util.Collections.emptyList();
      private void ensureRecentActivityIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          recentActivity_ = new java.util.ArrayList<redditanalysis.Reddit.SubReddit>(recentActivity_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          redditanalysis.Reddit.SubReddit, redditanalysis.Reddit.SubReddit.Builder, redditanalysis.Reddit.SubRedditOrBuilder> recentActivityBuilder_;

      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public java.util.List<redditanalysis.Reddit.SubReddit> getRecentActivityList() {
        if (recentActivityBuilder_ == null) {
          return java.util.Collections.unmodifiableList(recentActivity_);
        } else {
          return recentActivityBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public int getRecentActivityCount() {
        if (recentActivityBuilder_ == null) {
          return recentActivity_.size();
        } else {
          return recentActivityBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public redditanalysis.Reddit.SubReddit getRecentActivity(int index) {
        if (recentActivityBuilder_ == null) {
          return recentActivity_.get(index);
        } else {
          return recentActivityBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public Builder setRecentActivity(
          int index, redditanalysis.Reddit.SubReddit value) {
        if (recentActivityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRecentActivityIsMutable();
          recentActivity_.set(index, value);
          onChanged();
        } else {
          recentActivityBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public Builder setRecentActivity(
          int index, redditanalysis.Reddit.SubReddit.Builder builderForValue) {
        if (recentActivityBuilder_ == null) {
          ensureRecentActivityIsMutable();
          recentActivity_.set(index, builderForValue.build());
          onChanged();
        } else {
          recentActivityBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public Builder addRecentActivity(redditanalysis.Reddit.SubReddit value) {
        if (recentActivityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRecentActivityIsMutable();
          recentActivity_.add(value);
          onChanged();
        } else {
          recentActivityBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public Builder addRecentActivity(
          int index, redditanalysis.Reddit.SubReddit value) {
        if (recentActivityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRecentActivityIsMutable();
          recentActivity_.add(index, value);
          onChanged();
        } else {
          recentActivityBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public Builder addRecentActivity(
          redditanalysis.Reddit.SubReddit.Builder builderForValue) {
        if (recentActivityBuilder_ == null) {
          ensureRecentActivityIsMutable();
          recentActivity_.add(builderForValue.build());
          onChanged();
        } else {
          recentActivityBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public Builder addRecentActivity(
          int index, redditanalysis.Reddit.SubReddit.Builder builderForValue) {
        if (recentActivityBuilder_ == null) {
          ensureRecentActivityIsMutable();
          recentActivity_.add(index, builderForValue.build());
          onChanged();
        } else {
          recentActivityBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public Builder addAllRecentActivity(
          java.lang.Iterable<? extends redditanalysis.Reddit.SubReddit> values) {
        if (recentActivityBuilder_ == null) {
          ensureRecentActivityIsMutable();
          super.addAll(values, recentActivity_);
          onChanged();
        } else {
          recentActivityBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public Builder clearRecentActivity() {
        if (recentActivityBuilder_ == null) {
          recentActivity_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          recentActivityBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public Builder removeRecentActivity(int index) {
        if (recentActivityBuilder_ == null) {
          ensureRecentActivityIsMutable();
          recentActivity_.remove(index);
          onChanged();
        } else {
          recentActivityBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public redditanalysis.Reddit.SubReddit.Builder getRecentActivityBuilder(
          int index) {
        return getRecentActivityFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public redditanalysis.Reddit.SubRedditOrBuilder getRecentActivityOrBuilder(
          int index) {
        if (recentActivityBuilder_ == null) {
          return recentActivity_.get(index);  } else {
          return recentActivityBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public java.util.List<? extends redditanalysis.Reddit.SubRedditOrBuilder> 
           getRecentActivityOrBuilderList() {
        if (recentActivityBuilder_ != null) {
          return recentActivityBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(recentActivity_);
        }
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public redditanalysis.Reddit.SubReddit.Builder addRecentActivityBuilder() {
        return getRecentActivityFieldBuilder().addBuilder(
            redditanalysis.Reddit.SubReddit.getDefaultInstance());
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public redditanalysis.Reddit.SubReddit.Builder addRecentActivityBuilder(
          int index) {
        return getRecentActivityFieldBuilder().addBuilder(
            index, redditanalysis.Reddit.SubReddit.getDefaultInstance());
      }
      /**
       * <code>repeated .SubReddit recent_activity = 1;</code>
       */
      public java.util.List<redditanalysis.Reddit.SubReddit.Builder> 
           getRecentActivityBuilderList() {
        return getRecentActivityFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          redditanalysis.Reddit.SubReddit, redditanalysis.Reddit.SubReddit.Builder, redditanalysis.Reddit.SubRedditOrBuilder> 
          getRecentActivityFieldBuilder() {
        if (recentActivityBuilder_ == null) {
          recentActivityBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              redditanalysis.Reddit.SubReddit, redditanalysis.Reddit.SubReddit.Builder, redditanalysis.Reddit.SubRedditOrBuilder>(
                  recentActivity_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          recentActivity_ = null;
        }
        return recentActivityBuilder_;
      }

      // repeated .SubReddit subscribers = 2;
      private java.util.List<redditanalysis.Reddit.SubReddit> subscribers_ =
        java.util.Collections.emptyList();
      private void ensureSubscribersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          subscribers_ = new java.util.ArrayList<redditanalysis.Reddit.SubReddit>(subscribers_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          redditanalysis.Reddit.SubReddit, redditanalysis.Reddit.SubReddit.Builder, redditanalysis.Reddit.SubRedditOrBuilder> subscribersBuilder_;

      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public java.util.List<redditanalysis.Reddit.SubReddit> getSubscribersList() {
        if (subscribersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(subscribers_);
        } else {
          return subscribersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public int getSubscribersCount() {
        if (subscribersBuilder_ == null) {
          return subscribers_.size();
        } else {
          return subscribersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public redditanalysis.Reddit.SubReddit getSubscribers(int index) {
        if (subscribersBuilder_ == null) {
          return subscribers_.get(index);
        } else {
          return subscribersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public Builder setSubscribers(
          int index, redditanalysis.Reddit.SubReddit value) {
        if (subscribersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubscribersIsMutable();
          subscribers_.set(index, value);
          onChanged();
        } else {
          subscribersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public Builder setSubscribers(
          int index, redditanalysis.Reddit.SubReddit.Builder builderForValue) {
        if (subscribersBuilder_ == null) {
          ensureSubscribersIsMutable();
          subscribers_.set(index, builderForValue.build());
          onChanged();
        } else {
          subscribersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public Builder addSubscribers(redditanalysis.Reddit.SubReddit value) {
        if (subscribersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubscribersIsMutable();
          subscribers_.add(value);
          onChanged();
        } else {
          subscribersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public Builder addSubscribers(
          int index, redditanalysis.Reddit.SubReddit value) {
        if (subscribersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubscribersIsMutable();
          subscribers_.add(index, value);
          onChanged();
        } else {
          subscribersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public Builder addSubscribers(
          redditanalysis.Reddit.SubReddit.Builder builderForValue) {
        if (subscribersBuilder_ == null) {
          ensureSubscribersIsMutable();
          subscribers_.add(builderForValue.build());
          onChanged();
        } else {
          subscribersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public Builder addSubscribers(
          int index, redditanalysis.Reddit.SubReddit.Builder builderForValue) {
        if (subscribersBuilder_ == null) {
          ensureSubscribersIsMutable();
          subscribers_.add(index, builderForValue.build());
          onChanged();
        } else {
          subscribersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public Builder addAllSubscribers(
          java.lang.Iterable<? extends redditanalysis.Reddit.SubReddit> values) {
        if (subscribersBuilder_ == null) {
          ensureSubscribersIsMutable();
          super.addAll(values, subscribers_);
          onChanged();
        } else {
          subscribersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public Builder clearSubscribers() {
        if (subscribersBuilder_ == null) {
          subscribers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          subscribersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public Builder removeSubscribers(int index) {
        if (subscribersBuilder_ == null) {
          ensureSubscribersIsMutable();
          subscribers_.remove(index);
          onChanged();
        } else {
          subscribersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public redditanalysis.Reddit.SubReddit.Builder getSubscribersBuilder(
          int index) {
        return getSubscribersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public redditanalysis.Reddit.SubRedditOrBuilder getSubscribersOrBuilder(
          int index) {
        if (subscribersBuilder_ == null) {
          return subscribers_.get(index);  } else {
          return subscribersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public java.util.List<? extends redditanalysis.Reddit.SubRedditOrBuilder> 
           getSubscribersOrBuilderList() {
        if (subscribersBuilder_ != null) {
          return subscribersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(subscribers_);
        }
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public redditanalysis.Reddit.SubReddit.Builder addSubscribersBuilder() {
        return getSubscribersFieldBuilder().addBuilder(
            redditanalysis.Reddit.SubReddit.getDefaultInstance());
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public redditanalysis.Reddit.SubReddit.Builder addSubscribersBuilder(
          int index) {
        return getSubscribersFieldBuilder().addBuilder(
            index, redditanalysis.Reddit.SubReddit.getDefaultInstance());
      }
      /**
       * <code>repeated .SubReddit subscribers = 2;</code>
       */
      public java.util.List<redditanalysis.Reddit.SubReddit.Builder> 
           getSubscribersBuilderList() {
        return getSubscribersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          redditanalysis.Reddit.SubReddit, redditanalysis.Reddit.SubReddit.Builder, redditanalysis.Reddit.SubRedditOrBuilder> 
          getSubscribersFieldBuilder() {
        if (subscribersBuilder_ == null) {
          subscribersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              redditanalysis.Reddit.SubReddit, redditanalysis.Reddit.SubReddit.Builder, redditanalysis.Reddit.SubRedditOrBuilder>(
                  subscribers_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          subscribers_ = null;
        }
        return subscribersBuilder_;
      }

      // repeated .SubReddit growth_over_24h = 3;
      private java.util.List<redditanalysis.Reddit.SubReddit> growthOver24H_ =
        java.util.Collections.emptyList();
      private void ensureGrowthOver24HIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          growthOver24H_ = new java.util.ArrayList<redditanalysis.Reddit.SubReddit>(growthOver24H_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          redditanalysis.Reddit.SubReddit, redditanalysis.Reddit.SubReddit.Builder, redditanalysis.Reddit.SubRedditOrBuilder> growthOver24HBuilder_;

      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public java.util.List<redditanalysis.Reddit.SubReddit> getGrowthOver24HList() {
        if (growthOver24HBuilder_ == null) {
          return java.util.Collections.unmodifiableList(growthOver24H_);
        } else {
          return growthOver24HBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public int getGrowthOver24HCount() {
        if (growthOver24HBuilder_ == null) {
          return growthOver24H_.size();
        } else {
          return growthOver24HBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public redditanalysis.Reddit.SubReddit getGrowthOver24H(int index) {
        if (growthOver24HBuilder_ == null) {
          return growthOver24H_.get(index);
        } else {
          return growthOver24HBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public Builder setGrowthOver24H(
          int index, redditanalysis.Reddit.SubReddit value) {
        if (growthOver24HBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGrowthOver24HIsMutable();
          growthOver24H_.set(index, value);
          onChanged();
        } else {
          growthOver24HBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public Builder setGrowthOver24H(
          int index, redditanalysis.Reddit.SubReddit.Builder builderForValue) {
        if (growthOver24HBuilder_ == null) {
          ensureGrowthOver24HIsMutable();
          growthOver24H_.set(index, builderForValue.build());
          onChanged();
        } else {
          growthOver24HBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public Builder addGrowthOver24H(redditanalysis.Reddit.SubReddit value) {
        if (growthOver24HBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGrowthOver24HIsMutable();
          growthOver24H_.add(value);
          onChanged();
        } else {
          growthOver24HBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public Builder addGrowthOver24H(
          int index, redditanalysis.Reddit.SubReddit value) {
        if (growthOver24HBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGrowthOver24HIsMutable();
          growthOver24H_.add(index, value);
          onChanged();
        } else {
          growthOver24HBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public Builder addGrowthOver24H(
          redditanalysis.Reddit.SubReddit.Builder builderForValue) {
        if (growthOver24HBuilder_ == null) {
          ensureGrowthOver24HIsMutable();
          growthOver24H_.add(builderForValue.build());
          onChanged();
        } else {
          growthOver24HBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public Builder addGrowthOver24H(
          int index, redditanalysis.Reddit.SubReddit.Builder builderForValue) {
        if (growthOver24HBuilder_ == null) {
          ensureGrowthOver24HIsMutable();
          growthOver24H_.add(index, builderForValue.build());
          onChanged();
        } else {
          growthOver24HBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public Builder addAllGrowthOver24H(
          java.lang.Iterable<? extends redditanalysis.Reddit.SubReddit> values) {
        if (growthOver24HBuilder_ == null) {
          ensureGrowthOver24HIsMutable();
          super.addAll(values, growthOver24H_);
          onChanged();
        } else {
          growthOver24HBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public Builder clearGrowthOver24H() {
        if (growthOver24HBuilder_ == null) {
          growthOver24H_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          growthOver24HBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public Builder removeGrowthOver24H(int index) {
        if (growthOver24HBuilder_ == null) {
          ensureGrowthOver24HIsMutable();
          growthOver24H_.remove(index);
          onChanged();
        } else {
          growthOver24HBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public redditanalysis.Reddit.SubReddit.Builder getGrowthOver24HBuilder(
          int index) {
        return getGrowthOver24HFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public redditanalysis.Reddit.SubRedditOrBuilder getGrowthOver24HOrBuilder(
          int index) {
        if (growthOver24HBuilder_ == null) {
          return growthOver24H_.get(index);  } else {
          return growthOver24HBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public java.util.List<? extends redditanalysis.Reddit.SubRedditOrBuilder> 
           getGrowthOver24HOrBuilderList() {
        if (growthOver24HBuilder_ != null) {
          return growthOver24HBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(growthOver24H_);
        }
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public redditanalysis.Reddit.SubReddit.Builder addGrowthOver24HBuilder() {
        return getGrowthOver24HFieldBuilder().addBuilder(
            redditanalysis.Reddit.SubReddit.getDefaultInstance());
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public redditanalysis.Reddit.SubReddit.Builder addGrowthOver24HBuilder(
          int index) {
        return getGrowthOver24HFieldBuilder().addBuilder(
            index, redditanalysis.Reddit.SubReddit.getDefaultInstance());
      }
      /**
       * <code>repeated .SubReddit growth_over_24h = 3;</code>
       */
      public java.util.List<redditanalysis.Reddit.SubReddit.Builder> 
           getGrowthOver24HBuilderList() {
        return getGrowthOver24HFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          redditanalysis.Reddit.SubReddit, redditanalysis.Reddit.SubReddit.Builder, redditanalysis.Reddit.SubRedditOrBuilder> 
          getGrowthOver24HFieldBuilder() {
        if (growthOver24HBuilder_ == null) {
          growthOver24HBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              redditanalysis.Reddit.SubReddit, redditanalysis.Reddit.SubReddit.Builder, redditanalysis.Reddit.SubRedditOrBuilder>(
                  growthOver24H_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          growthOver24H_ = null;
        }
        return growthOver24HBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Reddits)
    }

    static {
      defaultInstance = new Reddits(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Reddits)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Keyword_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Keyword_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Comment_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Comment_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_SubRedditData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SubRedditData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_SubReddit_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SubReddit_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Reddits_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Reddits_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014Reddit.proto\")\n\007Keyword\022\017\n\007keyword\030\001 \002" +
      "(\t\022\r\n\005score\030\002 \002(\002\"e\n\007Comment\022\014\n\004body\030\001 \002" +
      "(\t\022\021\n\tbody_html\030\002 \002(\t\022\016\n\006author\030\003 \002(\t\022\013\n" +
      "\003ups\030\004 \002(\005\022\r\n\005score\030\005 \002(\005\022\r\n\005downs\030\006 \002(\005" +
      "\"\315\001\n\rSubRedditData\022\020\n\010selftext\030\001 \002(\t\022\025\n\r" +
      "selftext_html\030\002 \002(\t\022\024\n\014num_comments\030\003 \002(" +
      "\005\022\r\n\005score\030\004 \002(\005\022\032\n\010comments\030\005 \003(\0132\010.Com" +
      "ment\022\032\n\010keywords\030\006 \003(\0132\010.Keyword\022\013\n\003ups\030" +
      "\007 \002(\005\022\013\n\003url\030\010 \002(\t\022\r\n\005title\030\t \002(\t\022\r\n\005dow" +
      "ns\030\n \002(\005\"\244\001\n\tSubReddit\022\014\n\004rank\030\001 \002(\005\022\027\n\017",
      "subreddit_title\030\002 \002(\t\022\013\n\003url\030\003 \002(\t\022\023\n\013su" +
      "bscribers\030\004 \001(\005\022\023\n\013growth_rate\030\005 \001(\002\022&\n\016" +
      "subreddit_data\030\006 \003(\0132\016.SubRedditData\022\021\n\t" +
      "timestamp\030\007 \002(\003\"t\n\007Reddits\022#\n\017recent_act" +
      "ivity\030\001 \003(\0132\n.SubReddit\022\037\n\013subscribers\030\002" +
      " \003(\0132\n.SubReddit\022#\n\017growth_over_24h\030\003 \003(" +
      "\0132\n.SubRedditB\020\n\016redditanalysis"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_Keyword_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_Keyword_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Keyword_descriptor,
              new java.lang.String[] { "Keyword", "Score", });
          internal_static_Comment_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_Comment_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Comment_descriptor,
              new java.lang.String[] { "Body", "BodyHtml", "Author", "Ups", "Score", "Downs", });
          internal_static_SubRedditData_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_SubRedditData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_SubRedditData_descriptor,
              new java.lang.String[] { "Selftext", "SelftextHtml", "NumComments", "Score", "Comments", "Keywords", "Ups", "Url", "Title", "Downs", });
          internal_static_SubReddit_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_SubReddit_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_SubReddit_descriptor,
              new java.lang.String[] { "Rank", "SubredditTitle", "Url", "Subscribers", "GrowthRate", "SubredditData", "Timestamp", });
          internal_static_Reddits_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_Reddits_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Reddits_descriptor,
              new java.lang.String[] { "RecentActivity", "Subscribers", "GrowthOver24H", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
